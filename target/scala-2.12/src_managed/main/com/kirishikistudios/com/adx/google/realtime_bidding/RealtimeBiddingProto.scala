// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.kirishikistudios.com.adx.google.realtime_bidding



object RealtimeBiddingProto {
  private lazy val ProtoBytes: Array[Byte] =
      com.trueaccord.scalapb.Encoding.fromBase64(scala.collection.Seq(
  """ChZyZWFsdGltZV9iaWRkaW5nLnByb3RvEiNjb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZSLQbgoKQmlkUmVxd
  WVzdBIOCgJpZBgCIAIoDFICaWQSDgoCaXAYBCABKAxSAmlwEnEKE3VzZXJfZGF0YV90cmVhdG1lbnQYMSADKA4yQS5jb20ua2lya
  XNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0LlVzZXJEYXRhVHJlYXRtZW50UhF1c2VyRGF0YVRyZWF0bWVud
  BIkCg5nb29nbGVfdXNlcl9pZBgVIAEoCVIMZ29vZ2xlVXNlcklkEkYKIGNvbnN0cmFpbmVkX3VzYWdlX2dvb2dsZV91c2VyX2lkG
  C8gASgJUhxjb25zdHJhaW5lZFVzYWdlR29vZ2xlVXNlcklkEiUKDmNvb2tpZV92ZXJzaW9uGBQgASgNUg1jb29raWVWZXJzaW9uE
  iwKEmNvb2tpZV9hZ2Vfc2Vjb25kcxgfIAEoBVIQY29va2llQWdlU2Vjb25kcxIqChFob3N0ZWRfbWF0Y2hfZGF0YRglIAEoDFIPa
  G9zdGVkTWF0Y2hEYXRhEkwKI2NvbnN0cmFpbmVkX3VzYWdlX2hvc3RlZF9tYXRjaF9kYXRhGDAgASgMUh9jb25zdHJhaW5lZFVzY
  WdlSG9zdGVkTWF0Y2hEYXRhEh0KCnVzZXJfYWdlbnQYBiABKAlSCXVzZXJBZ2VudBIrChFwdWJsaXNoZXJfY291bnRyeRg3IAEoC
  VIQcHVibGlzaGVyQ291bnRyeRImCg9nZW9fY3JpdGVyaWFfaWQYJyABKAVSDWdlb0NyaXRlcmlhSWQSHwoLcG9zdGFsX2NvZGUYI
  SABKAlSCnBvc3RhbENvZGUSLAoScG9zdGFsX2NvZGVfcHJlZml4GCIgASgJUhBwb3N0YWxDb2RlUHJlZml4EjgKGGVuY3J5cHRlZ
  F9oeXBlcmxvY2FsX3NldBgoIAEoDFIWZW5jcnlwdGVkSHlwZXJsb2NhbFNldBJkCg5oeXBlcmxvY2FsX3NldBg1IAEoCzI9LmNvb
  S5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuSHlwZXJsb2NhbFNldFINaHlwZXJsb2NhbFNldBInC
  g90aW1lem9uZV9vZmZzZXQYGSABKAVSDnRpbWV6b25lT2Zmc2V0EicKDXVzZXJfdmVydGljYWwYHiADKAVCAhABUgx1c2VyVmVyd
  GljYWwSVQoJdXNlcl9saXN0GCAgAygLMjguY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb29nbGUuQmlkUmVxdWVzdC5Vc
  2VyTGlzdFIIdXNlckxpc3QSIQoMcHVibGlzaGVyX2lkGDggASgJUgtwdWJsaXNoZXJJZBIqChFzZWxsZXJfbmV0d29ya19pZBgpI
  AEoBVIPc2VsbGVyTmV0d29ya0lkEh0KCnBhcnRuZXJfaWQYNCABKAZSCXBhcnRuZXJJZBIQCgN1cmwYCyABKAlSA3VybBIhCgxhb
  m9ueW1vdXNfaWQYEyABKAlSC2Fub255bW91c0lkEisKEWRldGVjdGVkX2xhbmd1YWdlGAwgAygJUhBkZXRlY3RlZExhbmd1YWdlE
  mUKEWRldGVjdGVkX3ZlcnRpY2FsGA0gAygLMjguY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb29nbGUuQmlkUmVxdWVzd
  C5WZXJ0aWNhbFIQZGV0ZWN0ZWRWZXJ0aWNhbBI4ChZkZXRlY3RlZF9jb250ZW50X2xhYmVsGBogAygFQgIQAVIUZGV0ZWN0ZWRDb
  250ZW50TGFiZWwSTgoGZGV2aWNlGDYgASgLMjYuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb29nbGUuQmlkUmVxdWVzd
  C5EZXZpY2VSBmRldmljZRJVCglrZXlfdmFsdWUYJiADKAsyOC5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5Ca
  WRSZXF1ZXN0LktleVZhbHVlUghrZXlWYWx1ZRJOCgZtb2JpbGUYHCABKAsyNi5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4L
  mdvb2dsZS5CaWRSZXF1ZXN0Lk1vYmlsZVIGbW9iaWxlEksKBXZpZGVvGB0gASgLMjUuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tL
  mFkeC5nb29nbGUuQmlkUmVxdWVzdC5WaWRlb1IFdmlkZW8SOwoacHVibGlzaGVyX3NldHRpbmdzX2xpc3RfaWQYKiABKAZSF3B1Y
  mxpc2hlclNldHRpbmdzTGlzdElkEnwKDnB1Ymxpc2hlcl90eXBlGDMgASgOMj0uY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFke
  C5nb29nbGUuQmlkUmVxdWVzdC5QdWJsaXNoZXJUeXBlOhZVTktOT1dOX1BVQkxJU0hFUl9UWVBFUg1wdWJsaXNoZXJUeXBlEk4KB
  mFkc2xvdBgOIAMoCzI2LmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuQWRTbG90UgZhZHNsb
  3QSdwoVYmlkX3Jlc3BvbnNlX2ZlZWRiYWNrGCwgAygLMkMuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb29nbGUuQmlkU
  mVxdWVzdC5CaWRSZXNwb25zZUZlZWRiYWNrUhNiaWRSZXNwb25zZUZlZWRiYWNrEh4KB2lzX3Rlc3QYDyABKAg6BWZhbHNlUgZpc
  1Rlc3QSHgoHaXNfcGluZxgRIAEoCDoFZmFsc2VSBmlzUGluZxJBChppc19wcmVkaWN0ZWRfdG9fYmVfaWdub3JlZBgtIAEoCDoFZ
  mFsc2VSFmlzUHJlZGljdGVkVG9CZUlnbm9yZWQaqwEKCkh5cGVybG9jYWwSWgoHY29ybmVycxgBIAMoCzJALmNvbS5raXJpc2hpa
  2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuSHlwZXJsb2NhbC5Qb2ludFIHY29ybmVycxpBCgVQb2ludBIaCghsY
  XRpdHVkZRgBIAEoAlIIbGF0aXR1ZGUSHAoJbG9uZ2l0dWRlGAIgASgCUglsb25naXR1ZGUa0AEKDUh5cGVybG9jYWxTZXQSWgoKa
  HlwZXJsb2NhbBgBIAMoCzI6LmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuSHlwZXJsb2Nhb
  FIKaHlwZXJsb2NhbBJjCgxjZW50ZXJfcG9pbnQYAiABKAsyQC5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5Ca
  WRSZXF1ZXN0Lkh5cGVybG9jYWwuUG9pbnRSC2NlbnRlclBvaW50GjsKCFVzZXJMaXN0Eg4KAmlkGAEgASgDUgJpZBIfCgthZ2Vfc
  2Vjb25kcxgCIAEoBVIKYWdlU2Vjb25kcxoyCghWZXJ0aWNhbBIOCgJpZBgBIAIoBVICaWQSFgoGd2VpZ2h0GAIgAigCUgZ3ZWlna
  HQapAcKBkRldmljZRJyCgtkZXZpY2VfdHlwZRgBIAEoDjJBLmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZ
  FJlcXVlc3QuRGV2aWNlLkRldmljZVR5cGU6DlVOS05PV05fREVWSUNFUgpkZXZpY2VUeXBlEhoKCHBsYXRmb3JtGAIgASgJUghwb
  GF0Zm9ybRIWCgVicmFuZBgDIAEoCToAUgVicmFuZBIWCgVtb2RlbBgEIAEoCToAUgVtb2RlbBJfCgpvc192ZXJzaW9uGAUgASgLM
  kAuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb29nbGUuQmlkUmVxdWVzdC5EZXZpY2UuT3NWZXJzaW9uUglvc1ZlcnNpb
  24SHQoKY2Fycmllcl9pZBgGIAEoA1IJY2FycmllcklkEiQKDHNjcmVlbl93aWR0aBgHIAEoBToBMFILc2NyZWVuV2lkdGgSJgoNc
  2NyZWVuX2hlaWdodBgIIAEoBToBMFIMc2NyZWVuSGVpZ2h0EjwKGXNjcmVlbl9waXhlbF9yYXRpb19taWxsaXMYCSABKAU6ATBSF
  nNjcmVlblBpeGVsUmF0aW9NaWxsaXMSjAEKEnNjcmVlbl9vcmllbnRhdGlvbhgKIAEoDjJILmNvbS5raXJpc2hpa2lzdHVkaW9zL
  mNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuRGV2aWNlLlNjcmVlbk9yaWVudGF0aW9uOhNVTktOT1dOX09SSUVOVEFUSU9OUhFzY
  3JlZW5PcmllbnRhdGlvbhIpChBoYXJkd2FyZV92ZXJzaW9uGAsgASgJUg9oYXJkd2FyZVZlcnNpb24aTQoJT3NWZXJzaW9uEhQKB
  W1ham9yGAEgASgFUgVtYWpvchIUCgVtaW5vchgCIAEoBVIFbWlub3ISFAoFbWljcm8YAyABKAVSBW1pY3JvInoKCkRldmljZVR5c
  GUSEgoOVU5LTk9XTl9ERVZJQ0UQABIRCg1ISUdIRU5EX1BIT05FEAESCgoGVEFCTEVUEAISFQoRUEVSU09OQUxfQ09NUFVURVIQA
  xIQCgxDT05ORUNURURfVFYQBBIQCgxHQU1FX0NPTlNPTEUQBSJJChFTY3JlZW5PcmllbnRhdGlvbhIXChNVTktOT1dOX09SSUVOV
  EFUSU9OEAASDAoIUE9SVFJBSVQQARINCglMQU5EU0NBUEUQAhoyCghLZXlWYWx1ZRIQCgNrZXkYASABKAlSA2tleRIUCgV2YWx1Z
  RgCIAEoCVIFdmFsdWUakgYKBk1vYmlsZRIcCgZpc19hcHAYByABKAg6BWZhbHNlUgVpc0FwcBIVCgZhcHBfaWQYBiABKAlSBWFwc
  ElkEj0KF2lzX2ludGVyc3RpdGlhbF9yZXF1ZXN0GAogASgIOgVmYWxzZVIVaXNJbnRlcnN0aXRpYWxSZXF1ZXN0EigKEGFwcF9jY
  XRlZ29yeV9pZHMYCyADKAVSDmFwcENhdGVnb3J5SWRzEjwKF2lzX21vYmlsZV93ZWJfb3B0aW1pemVkGBEgASgIOgVmYWxzZVIUa
  XNNb2JpbGVXZWJPcHRpbWl6ZWQSOAoYZW5jcnlwdGVkX2FkdmVydGlzaW5nX2lkGBQgASgMUhZlbmNyeXB0ZWRBZHZlcnRpc2luZ
  0lkEiUKDmFkdmVydGlzaW5nX2lkGBsgASgMUg1hZHZlcnRpc2luZ0lkEjIKFWVuY3J5cHRlZF9oYXNoZWRfaWRmYRgVIAEoDFITZ
  W5jcnlwdGVkSGFzaGVkSWRmYRIfCgtoYXNoZWRfaWRmYRgcIAEoDFIKaGFzaGVkSWRmYRJaCipjb25zdHJhaW5lZF91c2FnZV9lb
  mNyeXB0ZWRfYWR2ZXJ0aXNpbmdfaWQYFiABKAxSJmNvbnN0cmFpbmVkVXNhZ2VFbmNyeXB0ZWRBZHZlcnRpc2luZ0lkEkcKIGNvb
  nN0cmFpbmVkX3VzYWdlX2FkdmVydGlzaW5nX2lkGB0gASgMUh1jb25zdHJhaW5lZFVzYWdlQWR2ZXJ0aXNpbmdJZBJUCidjb25zd
  HJhaW5lZF91c2FnZV9lbmNyeXB0ZWRfaGFzaGVkX2lkZmEYFyABKAxSI2NvbnN0cmFpbmVkVXNhZ2VFbmNyeXB0ZWRIYXNoZWRJZ
  GZhEkEKHWNvbnN0cmFpbmVkX3VzYWdlX2hhc2hlZF9pZGZhGB4gASgMUhpjb25zdHJhaW5lZFVzYWdlSGFzaGVkSWRmYRIZCghhc
  HBfbmFtZRgYIAEoCVIHYXBwTmFtZRIdCgphcHBfcmF0aW5nGBkgASgCUglhcHBSYXRpbmcawRUKBVZpZGVvEnAKCXBsYWNlbWVud
  BgQIAEoDjI/LmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuVmlkZW8uUGxhY2VtZW50OhFVT
  ktOT1dOX1BMQUNFTUVOVFIJcGxhY2VtZW50EicKD2Rlc2NyaXB0aW9uX3VybBgKIAEoCVIOZGVzY3JpcHRpb25VcmwSNQoTaXNfZ
  W1iZWRkZWRfb2Zmc2l0ZRgLIAEoCDoFZmFsc2VSEWlzRW1iZWRkZWRPZmZzaXRlEoIBCg9wbGF5YmFja19tZXRob2QYDiABKA4yS
  S5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0LlZpZGVvLlZpZGVvUGxheWJhY2tNZXRob2Q6D
  k1FVEhPRF9VTktOT1dOUg5wbGF5YmFja01ldGhvZBIhCgxpc19jbGlja2FibGUYDyABKAhSC2lzQ2xpY2thYmxlEi4KE3ZpZGVvY
  WRfc3RhcnRfZGVsYXkYASABKAVSEXZpZGVvYWRTdGFydERlbGF5EiYKD21heF9hZF9kdXJhdGlvbhgCIAEoBVINbWF4QWREdXJhd
  GlvbhImCg9taW5fYWRfZHVyYXRpb24YCCABKAVSDW1pbkFkRHVyYXRpb24SIwoObWF4X2Fkc19pbl9wb2QYDCABKAVSC21heEFkc
  0luUG9kEowBChJ2aWRlb19hZF9za2lwcGFibGUYBCABKA4yTS5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5Ca
  WRSZXF1ZXN0LlZpZGVvLlNraXBwYWJsZUJpZFJlcXVlc3RUeXBlOg9BTExPV19TS0lQUEFCTEVSEHZpZGVvQWRTa2lwcGFibGUSO
  QoZc2tpcHBhYmxlX21heF9hZF9kdXJhdGlvbhgFIAEoBVIWc2tpcHBhYmxlTWF4QWREdXJhdGlvbhJlCglwcm90b2NvbHMYESADK
  A4yQy5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0LlZpZGVvLlZpZGVvUHJvdG9jb2xCAhABU
  glwcm90b2NvbHMSdQoVYWxsb3dlZF92aWRlb19mb3JtYXRzGAYgAygOMkEuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb
  29nbGUuQmlkUmVxdWVzdC5WaWRlby5WaWRlb0Zvcm1hdFITYWxsb3dlZFZpZGVvRm9ybWF0cxJqCg5jb21wYW5pb25fc2xvdBgHI
  AMoCzJDLmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuVmlkZW8uQ29tcGFuaW9uU2xvdFINY
  29tcGFuaW9uU2xvdBKAAQoPZW5kX2NhcF9zdXBwb3J0GA0gASgOMkMuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb29nb
  GUuQmlkUmVxdWVzdC5WaWRlby5FbmRDYXBTdXBwb3J0OhNFTkRfQ0FQX05PVF9FTkFCTEVEUg1lbmRDYXBTdXBwb3J0EnYKEmNvb
  nRlbnRfYXR0cmlidXRlcxgJIAEoCzJHLmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuVmlkZ
  W8uQ29udGVudEF0dHJpYnV0ZXNSEWNvbnRlbnRBdHRyaWJ1dGVzEooBChlERVBSRUNBVEVEX2ludmVudG9yeV90eXBlGAMgASgOM
  kMuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb29nbGUuQmlkUmVxdWVzdC5WaWRlby5JbnZlbnRvcnlUeXBlOglXRUJfV
  klERU9SF0RFUFJFQ0FURURJbnZlbnRvcnlUeXBlGrUCCg1Db21wYW5pb25TbG90EhoKBmhlaWdodBgBIAMoBUICEAFSBmhlaWdod
  BIYCgV3aWR0aBgCIAMoBUICEAFSBXdpZHRoEnsKD2NyZWF0aXZlX2Zvcm1hdBgDIAMoDjJSLmNvbS5raXJpc2hpa2lzdHVkaW9zL
  mNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuVmlkZW8uQ29tcGFuaW9uU2xvdC5DcmVhdGl2ZUZvcm1hdFIOY3JlYXRpdmVGb3JtY
  XQicQoOQ3JlYXRpdmVGb3JtYXQSJAoXVU5LTk9XTl9DUkVBVElWRV9GT1JNQVQQ////////////ARISCg5JTUFHRV9DUkVBVElWR
  RAAEhIKDkZMQVNIX0NSRUFUSVZFEAESEQoNSFRNTF9DUkVBVElWRRACGnAKEUNvbnRlbnRBdHRyaWJ1dGVzEhQKBXRpdGxlGAEgA
  SgJUgV0aXRsZRIpChBkdXJhdGlvbl9zZWNvbmRzGAIgASgFUg9kdXJhdGlvblNlY29uZHMSGgoIa2V5d29yZHMYAyADKAlSCGtle
  XdvcmRzIk8KCVBsYWNlbWVudBIVChFVTktOT1dOX1BMQUNFTUVOVBAAEgwKCElOU1RSRUFNEAESEAoMSU5URVJTVElUSUFMEAISC
  woHSU5fRkVFRBADIn0KE1ZpZGVvUGxheWJhY2tNZXRob2QSEgoOTUVUSE9EX1VOS05PV04QABIWChJBVVRPX1BMQVlfU09VTkRfT
  04QARIXChNBVVRPX1BMQVlfU09VTkRfT0ZGEAISEQoNQ0xJQ0tfVE9fUExBWRADEg4KCk1PVVNFX09WRVIQBCJaChdTa2lwcGFib
  GVCaWRSZXF1ZXN0VHlwZRITCg9BTExPV19TS0lQUEFCTEUQABIVChFSRVFVSVJFX1NLSVBQQUJMRRABEhMKD0JMT0NLX1NLSVBQQ
  UJMRRACIuEBCg1WaWRlb1Byb3RvY29sEhoKFlVOS05PV05fVklERU9fUFJPVE9DT0wQABIMCghWQVNUXzFfMBABEgwKCFZBU1RfM
  l8wEAISDAoIVkFTVF8zXzAQAxIUChBWQVNUXzFfMF9XUkFQUEVSEAQSFAoQVkFTVF8yXzBfV1JBUFBFUhAFEhQKEFZBU1RfM18wX
  1dSQVBQRVIQBhIMCghWQVNUXzRfMBAHEhQKEFZBU1RfNF8wX1dSQVBQRVIQCBINCglEQUFTVF8xXzAQCRIVChFEQUFTVF8xXzBfV
  1JBUFBFUhAKInwKC1ZpZGVvRm9ybWF0EiEKFFVOS05PV05fVklERU9fRk9STUFUEP///////////wESDQoJVklERU9fRkxWEAASD
  QoJVklERU9fTVA0EAESDQoJWVRfSE9TVEVEEAISDwoLVlBBSURfRkxBU0gQAxIMCghWUEFJRF9KUxAEImsKDUVuZENhcFN1cHBvc
  nQSFwoTRU5EX0NBUF9OT1RfRU5BQkxFRBAAEhQKEEVORF9DQVBfT1BUSU9OQUwQARIVChFFTkRfQ0FQX0ZPUkJJRERFThACEhQKE
  EVORF9DQVBfUkVRVUlSRUQQAyJYCg1JbnZlbnRvcnlUeXBlEg0KCVdFQl9WSURFTxAAEgkKBUdBTUVTEAESFwoTTU9CSUxFX0lOV
  EVSU1RJVElBTBACEhQKEE1PQklMRV9BUFBfVklERU8QAxqOMwoGQWRTbG90Eg4KAmlkGAEgAigFUgJpZBIgCgxhZF9ibG9ja19rZ
  XkYDiABKARSCmFkQmxvY2tLZXkSLQoSdGFyZ2V0YWJsZV9jaGFubmVsGAogAygJUhF0YXJnZXRhYmxlQ2hhbm5lbBIUCgV3aWR0a
  BgCIAMoBVIFd2lkdGgSFgoGaGVpZ2h0GAMgAygFUgZoZWlnaHQSMQoSZXhjbHVkZWRfYXR0cmlidXRlGAQgAygFQgIQAVIRZXhjb
  HVkZWRBdHRyaWJ1dGUSMgoTYWxsb3dlZF92ZW5kb3JfdHlwZRgGIAMoBUICEAFSEWFsbG93ZWRWZW5kb3JUeXBlEkIKG2V4Y2x1Z
  GVkX3NlbnNpdGl2ZV9jYXRlZ29yeRgHIAMoBUICEAFSGWV4Y2x1ZGVkU2Vuc2l0aXZlQ2F0ZWdvcnkSQgobYWxsb3dlZF9yZXN0c
  mljdGVkX2NhdGVnb3J5GBAgAygFQgIQAVIZYWxsb3dlZFJlc3RyaWN0ZWRDYXRlZ29yeRJUCiVhbGxvd2VkX3Jlc3RyaWN0ZWRfY
  2F0ZWdvcnlfZm9yX2RlYWxzGBYgAygFQgIQAVIhYWxsb3dlZFJlc3RyaWN0ZWRDYXRlZ29yeUZvckRlYWxzEisKEWFsbG93ZWRfb
  GFuZ3VhZ2VzGBsgAygJUhBhbGxvd2VkTGFuZ3VhZ2VzEj4KGWV4Y2x1ZGVkX3Byb2R1Y3RfY2F0ZWdvcnkYDSADKAVCAhABUhdle
  GNsdWRlZFByb2R1Y3RDYXRlZ29yeRJvChBtYXRjaGluZ19hZF9kYXRhGAkgAygLMkUuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tL
  mFkeC5nb29nbGUuQmlkUmVxdWVzdC5BZFNsb3QuTWF0Y2hpbmdBZERhdGFSDm1hdGNoaW5nQWREYXRhEjsKGnB1Ymxpc2hlcl9zZ
  XR0aW5nc19saXN0X2lkGA8gAygGUhdwdWJsaXNoZXJTZXR0aW5nc0xpc3RJZBJxChBleGNoYW5nZV9iaWRkaW5nGBwgASgLMkYuY
  29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb29nbGUuQmlkUmVxdWVzdC5BZFNsb3QuRXhjaGFuZ2VCaWRkaW5nUg9leGNoY
  W5nZUJpZGRpbmcSJwoQZGZwX2FkX3VuaXRfY29kZRghIAEoCVINZGZwQWRVbml0Q29kZRJ8Cg9zbG90X3Zpc2liaWxpdHkYDCABK
  A4yRS5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0LkFkU2xvdC5TbG90VmlzaWJpbGl0eToMT
  k9fREVURUNUSU9OUg5zbG90VmlzaWJpbGl0eRIkCgt2aWV3YWJpbGl0eRgVIAEoBToCLTFSC3ZpZXdhYmlsaXR5EjAKEmNsaWNrX
  3Rocm91Z2hfcmF0ZRgZIAEoAjoCLTFSEGNsaWNrVGhyb3VnaFJhdGUSNgoVdmlkZW9fY29tcGxldGlvbl9yYXRlGB4gASgCOgItM
  VITdmlkZW9Db21wbGV0aW9uUmF0ZRKBAQoOaWZyYW1pbmdfc3RhdGUYEyABKA4yRC5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uY
  WR4Lmdvb2dsZS5CaWRSZXF1ZXN0LkFkU2xvdC5JRnJhbWluZ1N0YXRlOhRVTktOT1dOX0lGUkFNRV9TVEFURVINaWZyYW1pbmdTd
  GF0ZRKBAQoOaWZyYW1pbmdfZGVwdGgYFCABKA4yRC5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1Z
  XN0LkFkU2xvdC5JRnJhbWluZ0RlcHRoOhRVTktOT1dOX0lGUkFNRV9ERVBUSFINaWZyYW1pbmdEZXB0aBJ1ChJuYXRpdmVfYWRfd
  GVtcGxhdGUYMyADKAsyRy5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0LkFkU2xvdC5OYXRpd
  mVBZFRlbXBsYXRlUhBuYXRpdmVBZFRlbXBsYXRlEnoKEG1lZGlhdGlvbl9zdGF0dXMYNCABKA4yRi5jb20ua2lyaXNoaWtpc3R1Z
  Glvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0LkFkU2xvdC5NZWRpYXRpb25TdGF0dXM6B1VOS05PV05SD21lZGlhdGlvblN0Y
  XR1cxJlCgxhdXRvX3JlZnJlc2gYFyABKAsyQi5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0L
  kFkU2xvdC5BdXRvUmVmcmVzaFILYXV0b1JlZnJlc2gSbgoPc3RpY2t5X3NldHRpbmdzGB8gASgLMkUuY29tLmtpcmlzaGlraXN0d
  WRpb3MuY29tLmFkeC5nb29nbGUuQmlkUmVxdWVzdC5BZFNsb3QuU3RpY2t5U2V0dGluZ3NSDnN0aWNreVNldHRpbmdzEpEBChdub
  25fYnJvd3Nlcl9zbG90X3NvdXJjZRgiIAEoDjJHLmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc
  3QuQWRTbG90Lk5vbkJyb3dzZXJTb3VyY2U6EVVOREVDTEFSRURfU09VUkNFUhRub25Ccm93c2VyU2xvdFNvdXJjZRI3ChRpc19pb
  nRlcnN0aXRpYWxfc2xvdBgjIAEoCDoFZmFsc2VSEmlzSW50ZXJzdGl0aWFsU2xvdBJtCghyZW5kZXJlchgaIAEoDjI/LmNvbS5ra
  XJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuQWRTbG90LlJlbmRlcmVyOhBVTktOT1dOX1JFTkRFUkVSU
  ghyZW5kZXJlchKEAQoTYW1wX2FkX3JlcXVlc3RfdHlwZRgdIAEoDjJHLmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ
  2xlLkJpZFJlcXVlc3QuQWRTbG90LkFtcEFkUmVxdWVzdFR5cGU6DE5PTl9BTVBfUEFHRVIQYW1wQWRSZXF1ZXN0VHlwZRImCgtpc
  19yZXdhcmRlZBggIAEoCDoFZmFsc2VSCmlzUmV3YXJkZWQScgoQYWxsb3dlZF9hZF90eXBlcxgkIAMoDjJELmNvbS5raXJpc2hpa
  2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuQWRTbG90LkFsbG93ZWRBZFR5cGVCAhABUg5hbGxvd2VkQWRUeXBlc
  xrICAoOTWF0Y2hpbmdBZERhdGESIQoKYmlsbGluZ19pZBgCIAMoA0ICEABSCWJpbGxpbmdJZBIsChJtaW5pbXVtX2NwbV9taWNyb
  3MYBSABKANSEG1pbmltdW1DcG1NaWNyb3MSeQoMcHJpY2luZ19ydWxlGAcgAygLMlYuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tL
  mFkeC5nb29nbGUuQmlkUmVxdWVzdC5BZFNsb3QuTWF0Y2hpbmdBZERhdGEuQnV5ZXJQcmljaW5nUnVsZVILcHJpY2luZ1J1bGUSc
  QoLZGlyZWN0X2RlYWwYBiADKAsyUC5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0LkFkU2xvd
  C5NYXRjaGluZ0FkRGF0YS5EaXJlY3REZWFsUgpkaXJlY3REZWFsGpoCChBCdXllclByaWNpbmdSdWxlEjEKFGluY2x1ZGVkX2Fkd
  mVydGlzZXJzGAEgAygDUhNpbmNsdWRlZEFkdmVydGlzZXJzEjEKFGV4Y2x1ZGVkX2FkdmVydGlzZXJzGAIgAygDUhNleGNsdWRlZ
  EFkdmVydGlzZXJzEisKEWluY2x1ZGVkX2FnZW5jaWVzGAMgAygDUhBpbmNsdWRlZEFnZW5jaWVzEisKEWV4Y2x1ZGVkX2FnZW5ja
  WVzGAQgAygDUhBleGNsdWRlZEFnZW5jaWVzEhgKB2Jsb2NrZWQYBSABKAhSB2Jsb2NrZWQSLAoSbWluaW11bV9jcG1fbWljcm9zG
  AYgASgDUhBtaW5pbXVtQ3BtTWljcm9zGtkDCgpEaXJlY3REZWFsEiQKDmRpcmVjdF9kZWFsX2lkGAEgASgDUgxkaXJlY3REZWFsS
  WQSKAoQZml4ZWRfY3BtX21pY3JvcxgCIAEoA1IOZml4ZWRDcG1NaWNyb3MSiQEKCWRlYWxfdHlwZRgDIAEoDjJZLmNvbS5raXJpc
  2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuQWRTbG90Lk1hdGNoaW5nQWREYXRhLkRpcmVjdERlYWwuRGVhb
  FR5cGU6EVVOS05PV05fREVBTF9UWVBFUghkZWFsVHlwZRJFChtwdWJsaXNoZXJfYmxvY2tzX292ZXJyaWRkZW4YBCABKAg6BWZhb
  HNlUhlwdWJsaXNoZXJCbG9ja3NPdmVycmlkZGVuEj8KHHJlbWFpbmluZ19pbXByZXNzaW9uc190b19idXkYBiABKANSGXJlbWFpb
  mluZ0ltcHJlc3Npb25zVG9CdXkiZwoIRGVhbFR5cGUSFQoRVU5LTk9XTl9ERUFMX1RZUEUQABISCg5QUkVGRVJSRURfREVBTBABE
  hMKD1BSSVZBVEVfQVVDVElPThACEhsKF1BST0dSQU1NQVRJQ19HVUFSQU5URUVEEAMaQgoPRXhjaGFuZ2VCaWRkaW5nEi8KE3B1Y
  mxpc2hlcl9wYXJhbWV0ZXIYASADKAlSEnB1Ymxpc2hlclBhcmFtZXRlchrGCAoQTmF0aXZlQWRUZW1wbGF0ZRInCg9yZXF1aXJlZ
  F9maWVsZHMYASABKANSDnJlcXVpcmVkRmllbGRzEi0KEnJlY29tbWVuZGVkX2ZpZWxkcxgCIAEoA1IRcmVjb21tZW5kZWRGaWVsZ
  HMSNwoYaGVhZGxpbmVfbWF4X3NhZmVfbGVuZ3RoGAMgASgFUhVoZWFkbGluZU1heFNhZmVMZW5ndGgSLwoUYm9keV9tYXhfc2FmZ
  V9sZW5ndGgYBCABKAVSEWJvZHlNYXhTYWZlTGVuZ3RoEkEKHmNhbGxfdG9fYWN0aW9uX21heF9zYWZlX2xlbmd0aBgFIAEoBVIZY
  2FsbFRvQWN0aW9uTWF4U2FmZUxlbmd0aBI7ChphZHZlcnRpc2VyX21heF9zYWZlX2xlbmd0aBgGIAEoBVIXYWR2ZXJ0aXNlck1he
  FNhZmVMZW5ndGgSMQoVc3RvcmVfbWF4X3NhZmVfbGVuZ3RoGA4gASgFUhJzdG9yZU1heFNhZmVMZW5ndGgSMQoVcHJpY2VfbWF4X
  3NhZmVfbGVuZ3RoGA8gASgFUhJwcmljZU1heFNhZmVMZW5ndGgSHwoLaW1hZ2Vfd2lkdGgYByABKAVSCmltYWdlV2lkdGgSIQoMa
  W1hZ2VfaGVpZ2h0GAggASgFUgtpbWFnZUhlaWdodBIdCgpsb2dvX3dpZHRoGAkgASgFUglsb2dvV2lkdGgSHwoLbG9nb19oZWlna
  HQYCiABKAVSCmxvZ29IZWlnaHQSJAoOYXBwX2ljb25fd2lkdGgYCyABKAVSDGFwcEljb25XaWR0aBImCg9hcHBfaWNvbl9oZWlna
  HQYDCABKAVSDWFwcEljb25IZWlnaHQSGQoIc3R5bGVfaWQYECABKAVSB3N0eWxlSWQShQEKEXN0eWxlX2xheW91dF90eXBlGBEgA
  SgOMlIuY29tLmtpcmlzaGlraXN0dWRpb3MuY29tLmFkeC5nb29nbGUuQmlkUmVxdWVzdC5BZFNsb3QuTmF0aXZlQWRUZW1wbGF0Z
  S5MYXlvdXRUeXBlOgVQSVhFTFIPc3R5bGVMYXlvdXRUeXBlEiEKDHN0eWxlX2hlaWdodBgSIAEoBVILc3R5bGVIZWlnaHQSHwoLc
  3R5bGVfd2lkdGgYEyABKAVSCnN0eWxlV2lkdGgirAEKBkZpZWxkcxINCglOT19GSUVMRFMQABIMCghIRUFETElORRABEggKBEJPR
  FkQAhISCg5DQUxMX1RPX0FDVElPThAEEg4KCkFEVkVSVElTRVIQCBIJCgVJTUFHRRAQEggKBExPR08QIBIMCghBUFBfSUNPThBAE
  hAKC1NUQVJfUkFUSU5HEIABEgoKBVBSSUNFEIACEgoKBVNUT1JFEIAEEgoKBVZJREVPEIAIIiIKCkxheW91dFR5cGUSCQoFUElYR
  UwQABIJCgVGTFVJRBABGpEECgtBdXRvUmVmcmVzaBKBAQoQcmVmcmVzaF9zZXR0aW5ncxgBIAMoCzJWLmNvbS5raXJpc2hpa2lzd
  HVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuQWRTbG90LkF1dG9SZWZyZXNoLkF1dG9SZWZyZXNoU2V0dGluZ3NSD3JlZ
  nJlc2hTZXR0aW5ncxImCg1yZWZyZXNoX2NvdW50GAIgASgFOgEwUgxyZWZyZXNoQ291bnQa1QIKE0F1dG9SZWZyZXNoU2V0dGluZ
  3MSpAEKDHJlZnJlc2hfdHlwZRgBIAEoDjJmLmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuQ
  WRTbG90LkF1dG9SZWZyZXNoLkF1dG9SZWZyZXNoU2V0dGluZ3MuQXV0b1JlZnJlc2hUeXBlOhlVTktOT1dOX0FVVE9fUkVGUkVTS
  F9UWVBFUgtyZWZyZXNoVHlwZRI/ChxtaW5fcmVmcmVzaF9pbnRlcnZhbF9zZWNvbmRzGAIgASgFUhltaW5SZWZyZXNoSW50ZXJ2Y
  WxTZWNvbmRzIlYKD0F1dG9SZWZyZXNoVHlwZRIdChlVTktOT1dOX0FVVE9fUkVGUkVTSF9UWVBFEAASDwoLVVNFUl9BQ1RJT04QA
  RIJCgVFVkVOVBACEggKBFRJTUUQAxqpBAoOU3RpY2t5U2V0dGluZ3MSlQEKE3ZlcnRpY2FsX3N0aWNraW5lc3MYASABKA4yUC5jb
  20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0LkFkU2xvdC5TdGlja3lTZXR0aW5ncy5TdGlja2luZ
  XNzOhJVTktOT1dOX1NUSUNLSU5FU1NSEnZlcnRpY2FsU3RpY2tpbmVzcxKgAQoZdG9wX2hvcml6b250YWxfc3RpY2tpbmVzcxgCI
  AEoDjJQLmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlcXVlc3QuQWRTbG90LlN0aWNreVNldHRpbmdzL
  lN0aWNraW5lc3M6ElVOS05PV05fU1RJQ0tJTkVTU1IXdG9wSG9yaXpvbnRhbFN0aWNraW5lc3MSpgEKHGJvdHRvbV9ob3Jpem9ud
  GFsX3N0aWNraW5lc3MYAyABKA4yUC5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXF1ZXN0LkFkU2xvd
  C5TdGlja3lTZXR0aW5ncy5TdGlja2luZXNzOhJVTktOT1dOX1NUSUNLSU5FU1NSGmJvdHRvbUhvcml6b250YWxTdGlja2luZXNzI
  jMKClN0aWNraW5lc3MSFgoSVU5LTk9XTl9TVElDS0lORVNTEAASDQoJSVNfU1RJQ0tZEAEiSgoOU2xvdFZpc2liaWxpdHkSEAoMT
  k9fREVURUNUSU9OEAASEgoOQUJPVkVfVEhFX0ZPTEQQARISCg5CRUxPV19USEVfRk9MRBACImkKDUlGcmFtaW5nU3RhdGUSGAoUV
  U5LTk9XTl9JRlJBTUVfU1RBVEUQABINCglOT19JRlJBTUUQARIWChJTQU1FX0RPTUFJTl9JRlJBTUUQAhIXChNDUk9TU19ET01BS
  U5fSUZSQU1FEAMiYQoNSUZyYW1pbmdEZXB0aBIYChRVTktOT1dOX0lGUkFNRV9ERVBUSBAAEhEKDU5PVF9JTl9JRlJBTUUQARIOC
  gpPTkVfSUZSQU1FEAISEwoPTVVMVElQTEVfSUZSQU1FEAMiMgoPTWVkaWF0aW9uU3RhdHVzEgsKB1VOS05PV04QABISCg5ESVJFQ
  1RfUkVRVUVTVBABIjoKEE5vbkJyb3dzZXJTb3VyY2USFQoRVU5ERUNMQVJFRF9TT1VSQ0UQABIPCgtERVNLVE9QX0FQUBABIjsKC
  FJlbmRlcmVyEhQKEFVOS05PV05fUkVOREVSRVIQABIKCgZHT09HTEUQARINCglQVUJMSVNIRVIQAiJQChBBbXBBZFJlcXVlc3RUe
  XBlEg8KC1VOS05PV05fQU1QEAASEAoMTk9OX0FNUF9QQUdFEAESGQoVQU1QX1BBR0VfTEFURV9SRVFVRVNUEAIiiAEKDUFsbG93Z
  WRBZFR5cGUSJAoXVU5LTk9XTl9BTExPV0VEX0FEX1RZUEUQ////////////ARIaChZBTExPV0VEX0FEX1RZUEVfQkFOTkVSEAASG
  goWQUxMT1dFRF9BRF9UWVBFX05BVElWRRABEhkKFUFMTE9XRURfQURfVFlQRV9WSURFTxACGqwBChNCaWRSZXNwb25zZUZlZWRiY
  WNrEh0KCnJlcXVlc3RfaWQYASABKAxSCXJlcXVlc3RJZBIlCg5jcmVhdGl2ZV9pbmRleBgCIAEoBVINY3JlYXRpdmVJbmRleBIwC
  hRjcmVhdGl2ZV9zdGF0dXNfY29kZRgDIAEoBVISY3JlYXRpdmVTdGF0dXNDb2RlEh0KCmNwbV9taWNyb3MYBCABKANSCWNwbU1pY
  3JvcyI5ChFVc2VyRGF0YVRyZWF0bWVudBIkCiBUQUdfRk9SX0NISUxEX0RJUkVDVEVEX1RSRUFUTUVOVBAAIogBCg1QdWJsaXNoZ
  XJUeXBlEhoKFlVOS05PV05fUFVCTElTSEVSX1RZUEUQABIkCiBBRFhfUFVCTElTSEVSX09XTkVEX0FORF9PUEVSQVRFRBABEh0KG
  UFEWF9QVUJMSVNIRVJfUkVQUkVTRU5URUQQAhIWChJHT09HTEVfUkVQUkVTRU5URUQQAyKUEAoLQmlkUmVzcG9uc2USQwoCYWQYA
  iADKAsyMy5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXNwb25zZS5BZFICYWQSIQoMZGVidWdfc3Rya
  W5nGAUgASgJUgtkZWJ1Z1N0cmluZxIsChJwcm9jZXNzaW5nX3RpbWVfbXMYBCABKAVSEHByb2Nlc3NpbmdUaW1lTXMa7g4KAkFkE
  ioKEWJ1eWVyX2NyZWF0aXZlX2lkGAogASgJUg9idXllckNyZWF0aXZlSWQSIQoMaHRtbF9zbmlwcGV0GAEgASgJUgtodG1sU25pc
  HBldBIbCgl2aWRlb191cmwYCSABKAlSCHZpZGVvVXJsElkKCW5hdGl2ZV9hZBgSIAEoCzI8LmNvbS5raXJpc2hpa2lzdHVkaW9zL
  mNvbS5hZHguZ29vZ2xlLkJpZFJlc3BvbnNlLkFkLk5hdGl2ZUFkUghuYXRpdmVBZBIqChFjbGlja190aHJvdWdoX3VybBgEIAMoC
  VIPY2xpY2tUaHJvdWdoVXJsEh8KC3ZlbmRvcl90eXBlGAUgAygFUgp2ZW5kb3JUeXBlEhwKCWF0dHJpYnV0ZRgGIAMoBVIJYXR0c
  mlidXRlEhoKCGNhdGVnb3J5GAcgAygFUghjYXRlZ29yeRIvChNyZXN0cmljdGVkX2NhdGVnb3J5GBEgAygFUhJyZXN0cmljdGVkQ
  2F0ZWdvcnkSJwoPYWR2ZXJ0aXNlcl9uYW1lGAsgAygJUg5hZHZlcnRpc2VyTmFtZRIfCgtiaWRkZXJfbmFtZRgWIAEoCVIKYmlkZ
  GVyTmFtZRIUCgV3aWR0aBgOIAEoBVIFd2lkdGgSFgoGaGVpZ2h0GA8gASgFUgZoZWlnaHQSGwoJYWdlbmN5X2lkGBAgASgDUghhZ
  2VuY3lJZBJSCgZhZHNsb3QYAyADKAsyOi5jb20ua2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXNwb25zZS5BZ
  C5BZFNsb3RSBmFkc2xvdBI2ChdpbXByZXNzaW9uX3RyYWNraW5nX3VybBgTIAMoCVIVaW1wcmVzc2lvblRyYWNraW5nVXJsEjsKG
  mFkX2Nob2ljZXNfZGVzdGluYXRpb25fdXJsGBUgASgJUhdhZENob2ljZXNEZXN0aW5hdGlvblVybBrlBQoITmF0aXZlQWQSGgoIa
  GVhZGxpbmUYASABKAlSCGhlYWRsaW5lEhIKBGJvZHkYAiABKAlSBGJvZHkSJAoOY2FsbF90b19hY3Rpb24YAyABKAlSDGNhbGxUb
  0FjdGlvbhIeCgphZHZlcnRpc2VyGAQgASgJUgphZHZlcnRpc2VyElgKBWltYWdlGAUgASgLMkIuY29tLmtpcmlzaGlraXN0dWRpb
  3MuY29tLmFkeC5nb29nbGUuQmlkUmVzcG9uc2UuQWQuTmF0aXZlQWQuSW1hZ2VSBWltYWdlElYKBGxvZ28YBiABKAsyQi5jb20ua
  2lyaXNoaWtpc3R1ZGlvcy5jb20uYWR4Lmdvb2dsZS5CaWRSZXNwb25zZS5BZC5OYXRpdmVBZC5JbWFnZVIEbG9nbxJdCghhcHBfa
  WNvbhgHIAEoCzJCLmNvbS5raXJpc2hpa2lzdHVkaW9zLmNvbS5hZHguZ29vZ2xlLkJpZFJlc3BvbnNlLkFkLk5hdGl2ZUFkLkltY
  WdlUgdhcHBJY29uEhsKCXZpZGVvX3VybBgNIAEoCVIIdmlkZW9VcmwSHwoLc3Rhcl9yYXRpbmcYCCABKAFSCnN0YXJSYXRpbmcSJ
  AoOY2xpY2tfbGlua191cmwYDiABKAlSDGNsaWNrTGlua1VybBIsChJjbGlja190cmFja2luZ191cmwYCyABKAlSEGNsaWNrVHJhY
  2tpbmdVcmwSFAoFcHJpY2UYCiABKAlSBXByaWNlEhQKBXN0b3JlGAwgASgJUgVzdG9yZRJLCiJERVBSRUNBVEVEX2ltcHJlc3Npb
  25fdHJhY2tpbmdfdXJsGAkgAygJUh9ERVBSRUNBVEVESW1wcmVzc2lvblRyYWNraW5nVXJsGkcKBUltYWdlEhAKA3VybBgBIAEoC
  VIDdXJsEhQKBXdpZHRoGAIgASgFUgV3aWR0aBIWCgZoZWlnaHQYAyABKAVSBmhlaWdodBqiAwoGQWRTbG90Eg4KAmlkGAEgAigFU
  gJpZBIkCg5tYXhfY3BtX21pY3JvcxgCIAIoA1IMbWF4Q3BtTWljcm9zEiQKDm1pbl9jcG1fbWljcm9zGAMgASgDUgxtaW5DcG1Na
  WNyb3MSHQoKYmlsbGluZ19pZBgEIAEoA1IJYmlsbGluZ0lkEhoKB2RlYWxfaWQYBSABKAM6ATBSBmRlYWxJZBIoChBleGNoYW5nZ
  V9kZWFsX2lkGAYgASgJUg5leGNoYW5nZURlYWxJZBKHAQoSZXhjaGFuZ2VfZGVhbF90eXBlGAcgASgOMksuY29tLmtpcmlzaGlra
  XN0dWRpb3MuY29tLmFkeC5nb29nbGUuQmlkUmVzcG9uc2UuQWQuQWRTbG90LkV4Y2hhbmdlRGVhbFR5cGU6DE9QRU5fQVVDVElPT
  lIQZXhjaGFuZ2VEZWFsVHlwZSJNChBFeGNoYW5nZURlYWxUeXBlEhAKDE9QRU5fQVVDVElPThAAEhMKD1BSSVZBVEVfQVVDVElPT
  hABEhIKDlBSRUZFUlJFRF9ERUFMEAI="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, Seq(
    ))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}