// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.kirishikistudios.com.adx.google.realtime_bidding



/** This is the message that you return in response to a BidRequest. You may
  * specify zero or more ads. For each ad, you should provide an ad slot on
  * which the ad can run. An ad slot is identified by the AdSlot.id from the
  * BidRequest. If you do not wish to bid, submit a response with no ads and
  * with only the processing_time_ms set.
  *
  * @param debugString
  *   If is_test was set in the BidRequest, then you may return debug information
  *   as plain text in this field. Please do not set this field under normal
  *   conditions, or set it to values longer than 100 characters. You should only
  *   use this field when asked to do so as part of troubleshooting particular
  *   problems.
  * @param processingTimeMs
  *   Please set this to the processing time in milliseconds from when you
  *   received the request to when you returned the response.
  */
@SerialVersionUID(0L)
final case class BidResponse(
    ad: _root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad] = _root_.scala.collection.Seq.empty,
    debugString: scala.Option[String] = None,
    processingTimeMs: scala.Option[Int] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[BidResponse] with com.trueaccord.lenses.Updatable[BidResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      ad.foreach(ad => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(ad.serializedSize) + ad.serializedSize)
      if (debugString.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, debugString.get) }
      if (processingTimeMs.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, processingTimeMs.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      ad.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      processingTimeMs.foreach { __v =>
        _output__.writeInt32(4, __v)
      };
      debugString.foreach { __v =>
        _output__.writeString(5, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse = {
      val __ad = (_root_.scala.collection.immutable.Vector.newBuilder[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad] ++= this.ad)
      var __debugString = this.debugString
      var __processingTimeMs = this.processingTimeMs
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __ad += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.defaultInstance)
          case 42 =>
            __debugString = Some(_input__.readString())
          case 32 =>
            __processingTimeMs = Some(_input__.readInt32())
          case tag => _input__.skipField(tag)
        }
      }
      com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse(
          ad = __ad.result(),
          debugString = __debugString,
          processingTimeMs = __processingTimeMs
      )
    }
    def clearAd = copy(ad = _root_.scala.collection.Seq.empty)
    def addAd(__vs: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad*): BidResponse = addAllAd(__vs)
    def addAllAd(__vs: TraversableOnce[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad]): BidResponse = copy(ad = ad ++ __vs)
    def withAd(__v: _root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad]): BidResponse = copy(ad = __v)
    def getDebugString: String = debugString.getOrElse("")
    def clearDebugString: BidResponse = copy(debugString = None)
    def withDebugString(__v: String): BidResponse = copy(debugString = Some(__v))
    def getProcessingTimeMs: Int = processingTimeMs.getOrElse(0)
    def clearProcessingTimeMs: BidResponse = copy(processingTimeMs = None)
    def withProcessingTimeMs(__v: Int): BidResponse = copy(processingTimeMs = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => ad
        case 5 => debugString.orNull
        case 4 => processingTimeMs.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => _root_.scalapb.descriptors.PRepeated(ad.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 5 => debugString.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => processingTimeMs.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse
}

object BidResponse extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = RealtimeBiddingProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = RealtimeBiddingProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => __out = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse(
  )
  /** @param buyerCreativeId
    *   A unique identifier chosen by you for the creative in this response.
    *   This must always be set, must be limited to at most 64 bytes, and must be
    *   a valid UTF8 string. Every buyer_creative_id you use must always be
    *   associated with the same creative. This field is used to communicate
    *   approval statuses when issues are found. Do not specify the same id for
    *   different creatives, or all creatives will be disapproved if a problem
    *   with a single creative is found. Do not specify different ids for the
    *   same creative in different responses or no creatives will be served since
    *   approval status is assigned on a per-id basis.
    * @param htmlSnippet
    *   The HTML snippet that will be placed on the web page to display the ad.
    *   Please use BidResponse.Ad.AdSlot.billing_id to indicate which billing id
    *   this snippet is attributed to.
    * @param videoUrl
    *   The URL to fetch a video ad. The URL should return an XML response that
    *   conforms to the VAST 2.0 or 3.0 standard. Please use
    *   BidResponse.Ad.AdSlot.billing_id to indicate which billing id to
    *   attribute this ad to. Only one of the following should be set:
    *   html_snippet, video_url. Only set this field if the BidRequest is for an
    *   in-video ad (BidRequest.video is present).
    * @param clickThroughUrl
    *   The set of destination URLs for the snippet. This includes the URLs that
    *   the user will go to if they click on the displayed ad, and any URLs that
    *   are visible in the rendered ad. Do not include intermediate calls to the
    *   adserver that are unrelated to the inal landing page. A BidResponse that
    *   returns a snippet or video ad but declares no click_through_url will be
    *   discarded. Only set this field if html_snippet or video_url or native_ad
    *   are set. This data is used as a destination URL declaration, for example
    *   for post-filtering of publisher-blocked URLs or ad categorization.
    *  
    *   For non-native ads, it is not used for click tracking or any
    *   other ad functionality; it is only used as a destination URL
    *   declaration.
    *  
    *   For native ads, if NativeAd.click_link_url is not set, the first
    *   value of click_through_url is used to direct the user to the landing
    *   page. In addition, all values are used as destination
    *   URL declarations (similar to the non-native case).
    * @param vendorType
    *   All vendor types for the ads that may be shown from this snippet. You
    *   should only declare vendor ids listed in the vendors.txt file in the
    *   technical documentation. We will check to ensure that the vendors you
    *   declare are in the allowed_vendor_type list sent in the BidRequest for
    *   AdX publishers, or in gdn-vendors.txt for GDN publishers.
    * @param attribute
    *   All attributes for the ads that may be shown from this snippet. See
    *   buyer-declarable-creative-attributes.txt in the technical documentation
    *   for a list of ids. We will check to ensure none of these attributes are
    *   in the excluded_attribute list in the BidRequest.
    * @param category
    *   All sensitive categories for the ads that may be shown from this snippet.
    *   See ad-sensitive-categories.txt in the technical documentation for a list
    *   of ids. We will check to ensure none of these categories were in the
    *   excluded_sensitive_category list in the BidRequest.
    * @param restrictedCategory
    *   All restricted categories for the ads that may be shown from this
    *   snippet. See ad-restricted-categories.txt in the technical documentation
    *   for a list of ids. We will check to ensure these categories were listed
    *   in the allowed_restricted_category list in the BidRequest. If you are
    *   bidding with ads in restricted categories you MUST ALWAYS declare them
    *   here.
    * @param advertiserName
    *   All names of the ad's advertisers.
    * @param bidderName
    *   For exchange bidders (third party exchanges doing real-time bidding on
    *   DFP), the name of the bidder that the exchange called to provide the ad.
    *   This is arbitrary UTF8 text but should be sufficient to identify the
    *   bidder and should be set consistently to the same value for the same
    *   bidder.
    * @param width
    *   The width and the height in pixels of the ad. Setting these is optional.
    *   However, these must be set if the bid BidRequest.AdSlot has more than one
    *   width and height or if BidRequest.Mobile.is_interstitial_request is true.
    * @param agencyId
    *   The Agency associated with this ad. See agencies.txt file in the
    *   technical documentation for a list of ids. If this ad has no associated
    *   agency then the value NONE (agency_id: 1) should be used rather than
    *   leaving this field unset.
    * @param impressionTrackingUrl
    *   The URLs to call when the impression is rendered. This is supported for
    *   all inventory types and all formats except for VAST video.
    * @param adChoicesDestinationUrl
    *   Link to ad preferences page. This is only supported for native ads.
    *   If present, a standard AdChoices icon is added to the native creative and
    *   linked to this URL.
    */
  @SerialVersionUID(0L)
  final case class Ad(
      buyerCreativeId: scala.Option[String] = None,
      htmlSnippet: scala.Option[String] = None,
      videoUrl: scala.Option[String] = None,
      nativeAd: scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd] = None,
      clickThroughUrl: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty,
      vendorType: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
      attribute: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
      category: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
      restrictedCategory: _root_.scala.collection.Seq[Int] = _root_.scala.collection.Seq.empty,
      advertiserName: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty,
      bidderName: scala.Option[String] = None,
      width: scala.Option[Int] = None,
      height: scala.Option[Int] = None,
      agencyId: scala.Option[Long] = None,
      adslot: _root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot] = _root_.scala.collection.Seq.empty,
      impressionTrackingUrl: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty,
      adChoicesDestinationUrl: scala.Option[String] = None
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Ad] with com.trueaccord.lenses.Updatable[Ad] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (buyerCreativeId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, buyerCreativeId.get) }
        if (htmlSnippet.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, htmlSnippet.get) }
        if (videoUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, videoUrl.get) }
        if (nativeAd.isDefined) { __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(nativeAd.get.serializedSize) + nativeAd.get.serializedSize }
        clickThroughUrl.foreach(clickThroughUrl => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, clickThroughUrl))
        vendorType.foreach(vendorType => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(5, vendorType))
        attribute.foreach(attribute => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, attribute))
        category.foreach(category => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(7, category))
        restrictedCategory.foreach(restrictedCategory => __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(17, restrictedCategory))
        advertiserName.foreach(advertiserName => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, advertiserName))
        if (bidderName.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(22, bidderName.get) }
        if (width.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(14, width.get) }
        if (height.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(15, height.get) }
        if (agencyId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(16, agencyId.get) }
        adslot.foreach(adslot => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(adslot.serializedSize) + adslot.serializedSize)
        impressionTrackingUrl.foreach(impressionTrackingUrl => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, impressionTrackingUrl))
        if (adChoicesDestinationUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(21, adChoicesDestinationUrl.get) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        htmlSnippet.foreach { __v =>
          _output__.writeString(1, __v)
        };
        adslot.foreach { __v =>
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        clickThroughUrl.foreach { __v =>
          _output__.writeString(4, __v)
        };
        vendorType.foreach { __v =>
          _output__.writeInt32(5, __v)
        };
        attribute.foreach { __v =>
          _output__.writeInt32(6, __v)
        };
        category.foreach { __v =>
          _output__.writeInt32(7, __v)
        };
        videoUrl.foreach { __v =>
          _output__.writeString(9, __v)
        };
        buyerCreativeId.foreach { __v =>
          _output__.writeString(10, __v)
        };
        advertiserName.foreach { __v =>
          _output__.writeString(11, __v)
        };
        width.foreach { __v =>
          _output__.writeInt32(14, __v)
        };
        height.foreach { __v =>
          _output__.writeInt32(15, __v)
        };
        agencyId.foreach { __v =>
          _output__.writeInt64(16, __v)
        };
        restrictedCategory.foreach { __v =>
          _output__.writeInt32(17, __v)
        };
        nativeAd.foreach { __v =>
          _output__.writeTag(18, 2)
          _output__.writeUInt32NoTag(__v.serializedSize)
          __v.writeTo(_output__)
        };
        impressionTrackingUrl.foreach { __v =>
          _output__.writeString(19, __v)
        };
        adChoicesDestinationUrl.foreach { __v =>
          _output__.writeString(21, __v)
        };
        bidderName.foreach { __v =>
          _output__.writeString(22, __v)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad = {
        var __buyerCreativeId = this.buyerCreativeId
        var __htmlSnippet = this.htmlSnippet
        var __videoUrl = this.videoUrl
        var __nativeAd = this.nativeAd
        val __clickThroughUrl = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.clickThroughUrl)
        val __vendorType = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.vendorType)
        val __attribute = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.attribute)
        val __category = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.category)
        val __restrictedCategory = (_root_.scala.collection.immutable.Vector.newBuilder[Int] ++= this.restrictedCategory)
        val __advertiserName = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.advertiserName)
        var __bidderName = this.bidderName
        var __width = this.width
        var __height = this.height
        var __agencyId = this.agencyId
        val __adslot = (_root_.scala.collection.immutable.Vector.newBuilder[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot] ++= this.adslot)
        val __impressionTrackingUrl = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.impressionTrackingUrl)
        var __adChoicesDestinationUrl = this.adChoicesDestinationUrl
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 82 =>
              __buyerCreativeId = Some(_input__.readString())
            case 10 =>
              __htmlSnippet = Some(_input__.readString())
            case 74 =>
              __videoUrl = Some(_input__.readString())
            case 146 =>
              __nativeAd = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __nativeAd.getOrElse(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.defaultInstance)))
            case 34 =>
              __clickThroughUrl += _input__.readString()
            case 40 =>
              __vendorType += _input__.readInt32()
            case 42 => {
              val length = _input__.readRawVarint32()
              val oldLimit = _input__.pushLimit(length)
              while (_input__.getBytesUntilLimit > 0) {
                __vendorType += _input__.readInt32
              }
              _input__.popLimit(oldLimit)
            }
            case 48 =>
              __attribute += _input__.readInt32()
            case 50 => {
              val length = _input__.readRawVarint32()
              val oldLimit = _input__.pushLimit(length)
              while (_input__.getBytesUntilLimit > 0) {
                __attribute += _input__.readInt32
              }
              _input__.popLimit(oldLimit)
            }
            case 56 =>
              __category += _input__.readInt32()
            case 58 => {
              val length = _input__.readRawVarint32()
              val oldLimit = _input__.pushLimit(length)
              while (_input__.getBytesUntilLimit > 0) {
                __category += _input__.readInt32
              }
              _input__.popLimit(oldLimit)
            }
            case 136 =>
              __restrictedCategory += _input__.readInt32()
            case 138 => {
              val length = _input__.readRawVarint32()
              val oldLimit = _input__.pushLimit(length)
              while (_input__.getBytesUntilLimit > 0) {
                __restrictedCategory += _input__.readInt32
              }
              _input__.popLimit(oldLimit)
            }
            case 90 =>
              __advertiserName += _input__.readString()
            case 178 =>
              __bidderName = Some(_input__.readString())
            case 112 =>
              __width = Some(_input__.readInt32())
            case 120 =>
              __height = Some(_input__.readInt32())
            case 128 =>
              __agencyId = Some(_input__.readInt64())
            case 26 =>
              __adslot += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.defaultInstance)
            case 154 =>
              __impressionTrackingUrl += _input__.readString()
            case 170 =>
              __adChoicesDestinationUrl = Some(_input__.readString())
            case tag => _input__.skipField(tag)
          }
        }
        com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad(
            buyerCreativeId = __buyerCreativeId,
            htmlSnippet = __htmlSnippet,
            videoUrl = __videoUrl,
            nativeAd = __nativeAd,
            clickThroughUrl = __clickThroughUrl.result(),
            vendorType = __vendorType.result(),
            attribute = __attribute.result(),
            category = __category.result(),
            restrictedCategory = __restrictedCategory.result(),
            advertiserName = __advertiserName.result(),
            bidderName = __bidderName,
            width = __width,
            height = __height,
            agencyId = __agencyId,
            adslot = __adslot.result(),
            impressionTrackingUrl = __impressionTrackingUrl.result(),
            adChoicesDestinationUrl = __adChoicesDestinationUrl
        )
      }
      def getBuyerCreativeId: String = buyerCreativeId.getOrElse("")
      def clearBuyerCreativeId: Ad = copy(buyerCreativeId = None)
      def withBuyerCreativeId(__v: String): Ad = copy(buyerCreativeId = Some(__v))
      def getHtmlSnippet: String = htmlSnippet.getOrElse("")
      def clearHtmlSnippet: Ad = copy(htmlSnippet = None)
      def withHtmlSnippet(__v: String): Ad = copy(htmlSnippet = Some(__v))
      def getVideoUrl: String = videoUrl.getOrElse("")
      def clearVideoUrl: Ad = copy(videoUrl = None)
      def withVideoUrl(__v: String): Ad = copy(videoUrl = Some(__v))
      def getNativeAd: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd = nativeAd.getOrElse(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.defaultInstance)
      def clearNativeAd: Ad = copy(nativeAd = None)
      def withNativeAd(__v: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd): Ad = copy(nativeAd = Some(__v))
      def clearClickThroughUrl = copy(clickThroughUrl = _root_.scala.collection.Seq.empty)
      def addClickThroughUrl(__vs: String*): Ad = addAllClickThroughUrl(__vs)
      def addAllClickThroughUrl(__vs: TraversableOnce[String]): Ad = copy(clickThroughUrl = clickThroughUrl ++ __vs)
      def withClickThroughUrl(__v: _root_.scala.collection.Seq[String]): Ad = copy(clickThroughUrl = __v)
      def clearVendorType = copy(vendorType = _root_.scala.collection.Seq.empty)
      def addVendorType(__vs: Int*): Ad = addAllVendorType(__vs)
      def addAllVendorType(__vs: TraversableOnce[Int]): Ad = copy(vendorType = vendorType ++ __vs)
      def withVendorType(__v: _root_.scala.collection.Seq[Int]): Ad = copy(vendorType = __v)
      def clearAttribute = copy(attribute = _root_.scala.collection.Seq.empty)
      def addAttribute(__vs: Int*): Ad = addAllAttribute(__vs)
      def addAllAttribute(__vs: TraversableOnce[Int]): Ad = copy(attribute = attribute ++ __vs)
      def withAttribute(__v: _root_.scala.collection.Seq[Int]): Ad = copy(attribute = __v)
      def clearCategory = copy(category = _root_.scala.collection.Seq.empty)
      def addCategory(__vs: Int*): Ad = addAllCategory(__vs)
      def addAllCategory(__vs: TraversableOnce[Int]): Ad = copy(category = category ++ __vs)
      def withCategory(__v: _root_.scala.collection.Seq[Int]): Ad = copy(category = __v)
      def clearRestrictedCategory = copy(restrictedCategory = _root_.scala.collection.Seq.empty)
      def addRestrictedCategory(__vs: Int*): Ad = addAllRestrictedCategory(__vs)
      def addAllRestrictedCategory(__vs: TraversableOnce[Int]): Ad = copy(restrictedCategory = restrictedCategory ++ __vs)
      def withRestrictedCategory(__v: _root_.scala.collection.Seq[Int]): Ad = copy(restrictedCategory = __v)
      def clearAdvertiserName = copy(advertiserName = _root_.scala.collection.Seq.empty)
      def addAdvertiserName(__vs: String*): Ad = addAllAdvertiserName(__vs)
      def addAllAdvertiserName(__vs: TraversableOnce[String]): Ad = copy(advertiserName = advertiserName ++ __vs)
      def withAdvertiserName(__v: _root_.scala.collection.Seq[String]): Ad = copy(advertiserName = __v)
      def getBidderName: String = bidderName.getOrElse("")
      def clearBidderName: Ad = copy(bidderName = None)
      def withBidderName(__v: String): Ad = copy(bidderName = Some(__v))
      def getWidth: Int = width.getOrElse(0)
      def clearWidth: Ad = copy(width = None)
      def withWidth(__v: Int): Ad = copy(width = Some(__v))
      def getHeight: Int = height.getOrElse(0)
      def clearHeight: Ad = copy(height = None)
      def withHeight(__v: Int): Ad = copy(height = Some(__v))
      def getAgencyId: Long = agencyId.getOrElse(0L)
      def clearAgencyId: Ad = copy(agencyId = None)
      def withAgencyId(__v: Long): Ad = copy(agencyId = Some(__v))
      def clearAdslot = copy(adslot = _root_.scala.collection.Seq.empty)
      def addAdslot(__vs: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot*): Ad = addAllAdslot(__vs)
      def addAllAdslot(__vs: TraversableOnce[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot]): Ad = copy(adslot = adslot ++ __vs)
      def withAdslot(__v: _root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot]): Ad = copy(adslot = __v)
      def clearImpressionTrackingUrl = copy(impressionTrackingUrl = _root_.scala.collection.Seq.empty)
      def addImpressionTrackingUrl(__vs: String*): Ad = addAllImpressionTrackingUrl(__vs)
      def addAllImpressionTrackingUrl(__vs: TraversableOnce[String]): Ad = copy(impressionTrackingUrl = impressionTrackingUrl ++ __vs)
      def withImpressionTrackingUrl(__v: _root_.scala.collection.Seq[String]): Ad = copy(impressionTrackingUrl = __v)
      def getAdChoicesDestinationUrl: String = adChoicesDestinationUrl.getOrElse("")
      def clearAdChoicesDestinationUrl: Ad = copy(adChoicesDestinationUrl = None)
      def withAdChoicesDestinationUrl(__v: String): Ad = copy(adChoicesDestinationUrl = Some(__v))
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 10 => buyerCreativeId.orNull
          case 1 => htmlSnippet.orNull
          case 9 => videoUrl.orNull
          case 18 => nativeAd.orNull
          case 4 => clickThroughUrl
          case 5 => vendorType
          case 6 => attribute
          case 7 => category
          case 17 => restrictedCategory
          case 11 => advertiserName
          case 22 => bidderName.orNull
          case 14 => width.orNull
          case 15 => height.orNull
          case 16 => agencyId.orNull
          case 3 => adslot
          case 19 => impressionTrackingUrl
          case 21 => adChoicesDestinationUrl.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 10 => buyerCreativeId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 1 => htmlSnippet.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 9 => videoUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 18 => nativeAd.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => _root_.scalapb.descriptors.PRepeated(clickThroughUrl.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
          case 5 => _root_.scalapb.descriptors.PRepeated(vendorType.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
          case 6 => _root_.scalapb.descriptors.PRepeated(attribute.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
          case 7 => _root_.scalapb.descriptors.PRepeated(category.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
          case 17 => _root_.scalapb.descriptors.PRepeated(restrictedCategory.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
          case 11 => _root_.scalapb.descriptors.PRepeated(advertiserName.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
          case 22 => bidderName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 14 => width.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 15 => height.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 16 => agencyId.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => _root_.scalapb.descriptors.PRepeated(adslot.map(_.toPMessage)(_root_.scala.collection.breakOut))
          case 19 => _root_.scalapb.descriptors.PRepeated(impressionTrackingUrl.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
          case 21 => adChoicesDestinationUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad
  }
  
  object Ad extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad(
        __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd]],
        __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.collection.Seq[String]],
        __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
        __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
        __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
        __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.collection.Seq[Int]],
        __fieldsMap.getOrElse(__fields.get(9), Nil).asInstanceOf[_root_.scala.collection.Seq[String]],
        __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[String]],
        __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[Int]],
        __fieldsMap.get(__fields.get(13)).asInstanceOf[scala.Option[Long]],
        __fieldsMap.getOrElse(__fields.get(14), Nil).asInstanceOf[_root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot]],
        __fieldsMap.getOrElse(__fields.get(15), Nil).asInstanceOf[_root_.scala.collection.Seq[String]],
        __fieldsMap.get(__fields.get(16)).asInstanceOf[scala.Option[String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.collection.Seq[Int]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[scala.Option[String]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[scala.Option[Int]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[scala.Option[Long]]),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[scala.Option[String]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 18 => __out = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd
        case 3 => __out = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot
      }
      __out
    }
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad(
    )
    /** The content of a native ad. Native ads consist of multiple building
      * blocks, which are rendered by the publisher. Only one of the following
      * should be set: html_snippet, video_url, or native_ad.
      * Only set this field if the BidRequest is for a native ad
      * (BidRequest.adslot.native is present).
      *
      * @param headline
      *   A short title for the ad.
      * @param body
      *   A long description of the ad.
      * @param callToAction
      *   A label for the button that the user is supposed to click
      * @param advertiser
      *   The name of the advertiser or sponsor, to be displayed in the ad
      *   creative.
      * @param image
      *   A large image.
      * @param logo
      *   A smaller image, for the advertiser's logo.
      * @param appIcon
      *   The app icon, for app download ads.
      * @param videoUrl
      *   The URL to fetch a video ad. The URL should return an XML response that
      *   conforms to the VAST 2.0 standard. Only set this field if the
      *   BidRequest is for native ads and the video field is requested.
      * @param starRating
      *   The app rating in the app store. Must be in the range [0-5].
      * @param clickLinkUrl
      *   The URL that the browser/SDK will load when the user clicks the ad.
      *   This can be the landing page directly, or the first step of a redirect
      *   chain that eventually leads to it. For backward compatibility, if this
      *   is not set, the first Ad.click_through_url is used.
      * @param clickTrackingUrl
      *   The URL to use for click tracking. The SDK pings click tracking url on
      *   a background thread. When resolving the url, HTTP 30x redirects are
      *   followed. The SDK ignores the contents of the response; this URL
      *   has no effect on the landing page for the user.
      * @param price
      *   The price of the promoted app including the currency info.
      * @param store
      *   The URL to the app store to purchase/download the promoted app.
      * @param dEPRECATEDImpressionTrackingUrl
      *   This field is deprecated. Please use
      *   BidResponse.Ad.impression_tracking_url instead.
      */
    @SerialVersionUID(0L)
    final case class NativeAd(
        headline: scala.Option[String] = None,
        body: scala.Option[String] = None,
        callToAction: scala.Option[String] = None,
        advertiser: scala.Option[String] = None,
        image: scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image] = None,
        logo: scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image] = None,
        appIcon: scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image] = None,
        videoUrl: scala.Option[String] = None,
        starRating: scala.Option[Double] = None,
        clickLinkUrl: scala.Option[String] = None,
        clickTrackingUrl: scala.Option[String] = None,
        price: scala.Option[String] = None,
        store: scala.Option[String] = None,
        dEPRECATEDImpressionTrackingUrl: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[NativeAd] with com.trueaccord.lenses.Updatable[NativeAd] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          if (headline.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, headline.get) }
          if (body.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, body.get) }
          if (callToAction.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, callToAction.get) }
          if (advertiser.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, advertiser.get) }
          if (image.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(image.get.serializedSize) + image.get.serializedSize }
          if (logo.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(logo.get.serializedSize) + logo.get.serializedSize }
          if (appIcon.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(appIcon.get.serializedSize) + appIcon.get.serializedSize }
          if (videoUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, videoUrl.get) }
          if (starRating.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(8, starRating.get) }
          if (clickLinkUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, clickLinkUrl.get) }
          if (clickTrackingUrl.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, clickTrackingUrl.get) }
          if (price.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, price.get) }
          if (store.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, store.get) }
          dEPRECATEDImpressionTrackingUrl.foreach(dEPRECATEDImpressionTrackingUrl => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, dEPRECATEDImpressionTrackingUrl))
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          headline.foreach { __v =>
            _output__.writeString(1, __v)
          };
          body.foreach { __v =>
            _output__.writeString(2, __v)
          };
          callToAction.foreach { __v =>
            _output__.writeString(3, __v)
          };
          advertiser.foreach { __v =>
            _output__.writeString(4, __v)
          };
          image.foreach { __v =>
            _output__.writeTag(5, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          logo.foreach { __v =>
            _output__.writeTag(6, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          appIcon.foreach { __v =>
            _output__.writeTag(7, 2)
            _output__.writeUInt32NoTag(__v.serializedSize)
            __v.writeTo(_output__)
          };
          starRating.foreach { __v =>
            _output__.writeDouble(8, __v)
          };
          dEPRECATEDImpressionTrackingUrl.foreach { __v =>
            _output__.writeString(9, __v)
          };
          price.foreach { __v =>
            _output__.writeString(10, __v)
          };
          clickTrackingUrl.foreach { __v =>
            _output__.writeString(11, __v)
          };
          store.foreach { __v =>
            _output__.writeString(12, __v)
          };
          videoUrl.foreach { __v =>
            _output__.writeString(13, __v)
          };
          clickLinkUrl.foreach { __v =>
            _output__.writeString(14, __v)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd = {
          var __headline = this.headline
          var __body = this.body
          var __callToAction = this.callToAction
          var __advertiser = this.advertiser
          var __image = this.image
          var __logo = this.logo
          var __appIcon = this.appIcon
          var __videoUrl = this.videoUrl
          var __starRating = this.starRating
          var __clickLinkUrl = this.clickLinkUrl
          var __clickTrackingUrl = this.clickTrackingUrl
          var __price = this.price
          var __store = this.store
          val __dEPRECATEDImpressionTrackingUrl = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.dEPRECATEDImpressionTrackingUrl)
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __headline = Some(_input__.readString())
              case 18 =>
                __body = Some(_input__.readString())
              case 26 =>
                __callToAction = Some(_input__.readString())
              case 34 =>
                __advertiser = Some(_input__.readString())
              case 42 =>
                __image = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __image.getOrElse(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image.defaultInstance)))
              case 50 =>
                __logo = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __logo.getOrElse(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image.defaultInstance)))
              case 58 =>
                __appIcon = Some(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, __appIcon.getOrElse(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image.defaultInstance)))
              case 106 =>
                __videoUrl = Some(_input__.readString())
              case 65 =>
                __starRating = Some(_input__.readDouble())
              case 114 =>
                __clickLinkUrl = Some(_input__.readString())
              case 90 =>
                __clickTrackingUrl = Some(_input__.readString())
              case 82 =>
                __price = Some(_input__.readString())
              case 98 =>
                __store = Some(_input__.readString())
              case 74 =>
                __dEPRECATEDImpressionTrackingUrl += _input__.readString()
              case tag => _input__.skipField(tag)
            }
          }
          com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd(
              headline = __headline,
              body = __body,
              callToAction = __callToAction,
              advertiser = __advertiser,
              image = __image,
              logo = __logo,
              appIcon = __appIcon,
              videoUrl = __videoUrl,
              starRating = __starRating,
              clickLinkUrl = __clickLinkUrl,
              clickTrackingUrl = __clickTrackingUrl,
              price = __price,
              store = __store,
              dEPRECATEDImpressionTrackingUrl = __dEPRECATEDImpressionTrackingUrl.result()
          )
        }
        def getHeadline: String = headline.getOrElse("")
        def clearHeadline: NativeAd = copy(headline = None)
        def withHeadline(__v: String): NativeAd = copy(headline = Some(__v))
        def getBody: String = body.getOrElse("")
        def clearBody: NativeAd = copy(body = None)
        def withBody(__v: String): NativeAd = copy(body = Some(__v))
        def getCallToAction: String = callToAction.getOrElse("")
        def clearCallToAction: NativeAd = copy(callToAction = None)
        def withCallToAction(__v: String): NativeAd = copy(callToAction = Some(__v))
        def getAdvertiser: String = advertiser.getOrElse("")
        def clearAdvertiser: NativeAd = copy(advertiser = None)
        def withAdvertiser(__v: String): NativeAd = copy(advertiser = Some(__v))
        def getImage: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image = image.getOrElse(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image.defaultInstance)
        def clearImage: NativeAd = copy(image = None)
        def withImage(__v: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image): NativeAd = copy(image = Some(__v))
        def getLogo: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image = logo.getOrElse(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image.defaultInstance)
        def clearLogo: NativeAd = copy(logo = None)
        def withLogo(__v: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image): NativeAd = copy(logo = Some(__v))
        def getAppIcon: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image = appIcon.getOrElse(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image.defaultInstance)
        def clearAppIcon: NativeAd = copy(appIcon = None)
        def withAppIcon(__v: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image): NativeAd = copy(appIcon = Some(__v))
        def getVideoUrl: String = videoUrl.getOrElse("")
        def clearVideoUrl: NativeAd = copy(videoUrl = None)
        def withVideoUrl(__v: String): NativeAd = copy(videoUrl = Some(__v))
        def getStarRating: Double = starRating.getOrElse(0.0)
        def clearStarRating: NativeAd = copy(starRating = None)
        def withStarRating(__v: Double): NativeAd = copy(starRating = Some(__v))
        def getClickLinkUrl: String = clickLinkUrl.getOrElse("")
        def clearClickLinkUrl: NativeAd = copy(clickLinkUrl = None)
        def withClickLinkUrl(__v: String): NativeAd = copy(clickLinkUrl = Some(__v))
        def getClickTrackingUrl: String = clickTrackingUrl.getOrElse("")
        def clearClickTrackingUrl: NativeAd = copy(clickTrackingUrl = None)
        def withClickTrackingUrl(__v: String): NativeAd = copy(clickTrackingUrl = Some(__v))
        def getPrice: String = price.getOrElse("")
        def clearPrice: NativeAd = copy(price = None)
        def withPrice(__v: String): NativeAd = copy(price = Some(__v))
        def getStore: String = store.getOrElse("")
        def clearStore: NativeAd = copy(store = None)
        def withStore(__v: String): NativeAd = copy(store = Some(__v))
        def clearDEPRECATEDImpressionTrackingUrl = copy(dEPRECATEDImpressionTrackingUrl = _root_.scala.collection.Seq.empty)
        def addDEPRECATEDImpressionTrackingUrl(__vs: String*): NativeAd = addAllDEPRECATEDImpressionTrackingUrl(__vs)
        def addAllDEPRECATEDImpressionTrackingUrl(__vs: TraversableOnce[String]): NativeAd = copy(dEPRECATEDImpressionTrackingUrl = dEPRECATEDImpressionTrackingUrl ++ __vs)
        def withDEPRECATEDImpressionTrackingUrl(__v: _root_.scala.collection.Seq[String]): NativeAd = copy(dEPRECATEDImpressionTrackingUrl = __v)
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => headline.orNull
            case 2 => body.orNull
            case 3 => callToAction.orNull
            case 4 => advertiser.orNull
            case 5 => image.orNull
            case 6 => logo.orNull
            case 7 => appIcon.orNull
            case 13 => videoUrl.orNull
            case 8 => starRating.orNull
            case 14 => clickLinkUrl.orNull
            case 11 => clickTrackingUrl.orNull
            case 10 => price.orNull
            case 12 => store.orNull
            case 9 => dEPRECATEDImpressionTrackingUrl
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => headline.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 2 => body.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 3 => callToAction.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 4 => advertiser.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 5 => image.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 6 => logo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 7 => appIcon.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 13 => videoUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 8 => starRating.map(_root_.scalapb.descriptors.PDouble).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 14 => clickLinkUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 11 => clickTrackingUrl.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 10 => price.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 12 => store.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 9 => _root_.scalapb.descriptors.PRepeated(dEPRECATEDImpressionTrackingUrl.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd
    }
    
    object NativeAd extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd(
          __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]],
          __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]],
          __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]],
          __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Double]],
          __fieldsMap.get(__fields.get(9)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(10)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(11)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(12)).asInstanceOf[scala.Option[String]],
          __fieldsMap.getOrElse(__fields.get(13), Nil).asInstanceOf[_root_.scala.collection.Seq[String]]
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[Double]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.javaDescriptor.getNestedTypes.get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 5 => __out = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image
          case 6 => __out = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image
          case 7 => __out = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image
        }
        __out
      }
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd(
      )
      /** @param width
        *   Image width and height are specified in pixels. You may provide a
        *   larger image than was requested, so long as the aspect ratio is
        *   preserved.
        */
      @SerialVersionUID(0L)
      final case class Image(
          url: scala.Option[String] = None,
          width: scala.Option[Int] = None,
          height: scala.Option[Int] = None
          ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Image] with com.trueaccord.lenses.Updatable[Image] {
          @transient
          private[this] var __serializedSizeCachedValue: Int = 0
          private[this] def __computeSerializedValue(): Int = {
            var __size = 0
            if (url.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, url.get) }
            if (width.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, width.get) }
            if (height.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, height.get) }
            __size
          }
          final override def serializedSize: Int = {
            var read = __serializedSizeCachedValue
            if (read == 0) {
              read = __computeSerializedValue()
              __serializedSizeCachedValue = read
            }
            read
          }
          def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
            url.foreach { __v =>
              _output__.writeString(1, __v)
            };
            width.foreach { __v =>
              _output__.writeInt32(2, __v)
            };
            height.foreach { __v =>
              _output__.writeInt32(3, __v)
            };
          }
          def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image = {
            var __url = this.url
            var __width = this.width
            var __height = this.height
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __url = Some(_input__.readString())
                case 16 =>
                  __width = Some(_input__.readInt32())
                case 24 =>
                  __height = Some(_input__.readInt32())
                case tag => _input__.skipField(tag)
              }
            }
            com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image(
                url = __url,
                width = __width,
                height = __height
            )
          }
          def getUrl: String = url.getOrElse("")
          def clearUrl: Image = copy(url = None)
          def withUrl(__v: String): Image = copy(url = Some(__v))
          def getWidth: Int = width.getOrElse(0)
          def clearWidth: Image = copy(width = None)
          def withWidth(__v: Int): Image = copy(width = Some(__v))
          def getHeight: Int = height.getOrElse(0)
          def clearHeight: Image = copy(height = None)
          def withHeight(__v: Int): Image = copy(height = Some(__v))
          def getFieldByNumber(__fieldNumber: Int): scala.Any = {
            (__fieldNumber: @_root_.scala.unchecked) match {
              case 1 => url.orNull
              case 2 => width.orNull
              case 3 => height.orNull
            }
          }
          def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
            require(__field.containingMessage eq companion.scalaDescriptor)
            (__field.number: @_root_.scala.unchecked) match {
              case 1 => url.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 2 => width.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 3 => height.map(_root_.scalapb.descriptors.PInt).getOrElse(_root_.scalapb.descriptors.PEmpty)
            }
          }
          override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
          def companion = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image
      }
      
      object Image extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image] {
        implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image] = this
        def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image = {
          require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
          val __fields = javaDescriptor.getFields
          com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image(
            __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
            __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Int]],
            __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Int]]
          )
        }
        implicit def messageReads: _root_.scalapb.descriptors.Reads[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image] = _root_.scalapb.descriptors.Reads{
          case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
            require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
            com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image(
              __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]]),
              __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Int]]),
              __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Int]])
            )
          case _ => throw new RuntimeException("Expected PMessage")
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.javaDescriptor.getNestedTypes.get(0)
        def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.scalaDescriptor.nestedMessages(0)
        def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
        def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
        lazy val defaultInstance = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image(
        )
        implicit class ImageLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image](_l) {
          def url: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getUrl)((c_, f_) => c_.copy(url = Some(f_)))
          def optionalUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.url)((c_, f_) => c_.copy(url = f_))
          def width: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getWidth)((c_, f_) => c_.copy(width = Some(f_)))
          def optionalWidth: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.width)((c_, f_) => c_.copy(width = f_))
          def height: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getHeight)((c_, f_) => c_.copy(height = Some(f_)))
          def optionalHeight: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.height)((c_, f_) => c_.copy(height = f_))
        }
        final val URL_FIELD_NUMBER = 1
        final val WIDTH_FIELD_NUMBER = 2
        final val HEIGHT_FIELD_NUMBER = 3
      }
      
      implicit class NativeAdLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd](_l) {
        def headline: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getHeadline)((c_, f_) => c_.copy(headline = Some(f_)))
        def optionalHeadline: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.headline)((c_, f_) => c_.copy(headline = f_))
        def body: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getBody)((c_, f_) => c_.copy(body = Some(f_)))
        def optionalBody: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.body)((c_, f_) => c_.copy(body = f_))
        def callToAction: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getCallToAction)((c_, f_) => c_.copy(callToAction = Some(f_)))
        def optionalCallToAction: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.callToAction)((c_, f_) => c_.copy(callToAction = f_))
        def advertiser: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getAdvertiser)((c_, f_) => c_.copy(advertiser = Some(f_)))
        def optionalAdvertiser: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.advertiser)((c_, f_) => c_.copy(advertiser = f_))
        def image: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image] = field(_.getImage)((c_, f_) => c_.copy(image = Some(f_)))
        def optionalImage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]] = field(_.image)((c_, f_) => c_.copy(image = f_))
        def logo: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image] = field(_.getLogo)((c_, f_) => c_.copy(logo = Some(f_)))
        def optionalLogo: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]] = field(_.logo)((c_, f_) => c_.copy(logo = f_))
        def appIcon: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image] = field(_.getAppIcon)((c_, f_) => c_.copy(appIcon = Some(f_)))
        def optionalAppIcon: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd.Image]] = field(_.appIcon)((c_, f_) => c_.copy(appIcon = f_))
        def videoUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getVideoUrl)((c_, f_) => c_.copy(videoUrl = Some(f_)))
        def optionalVideoUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.videoUrl)((c_, f_) => c_.copy(videoUrl = f_))
        def starRating: _root_.com.trueaccord.lenses.Lens[UpperPB, Double] = field(_.getStarRating)((c_, f_) => c_.copy(starRating = Some(f_)))
        def optionalStarRating: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Double]] = field(_.starRating)((c_, f_) => c_.copy(starRating = f_))
        def clickLinkUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getClickLinkUrl)((c_, f_) => c_.copy(clickLinkUrl = Some(f_)))
        def optionalClickLinkUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.clickLinkUrl)((c_, f_) => c_.copy(clickLinkUrl = f_))
        def clickTrackingUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getClickTrackingUrl)((c_, f_) => c_.copy(clickTrackingUrl = Some(f_)))
        def optionalClickTrackingUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.clickTrackingUrl)((c_, f_) => c_.copy(clickTrackingUrl = f_))
        def price: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPrice)((c_, f_) => c_.copy(price = Some(f_)))
        def optionalPrice: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.price)((c_, f_) => c_.copy(price = f_))
        def store: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getStore)((c_, f_) => c_.copy(store = Some(f_)))
        def optionalStore: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.store)((c_, f_) => c_.copy(store = f_))
        def dEPRECATEDImpressionTrackingUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.dEPRECATEDImpressionTrackingUrl)((c_, f_) => c_.copy(dEPRECATEDImpressionTrackingUrl = f_))
      }
      final val HEADLINE_FIELD_NUMBER = 1
      final val BODY_FIELD_NUMBER = 2
      final val CALL_TO_ACTION_FIELD_NUMBER = 3
      final val ADVERTISER_FIELD_NUMBER = 4
      final val IMAGE_FIELD_NUMBER = 5
      final val LOGO_FIELD_NUMBER = 6
      final val APP_ICON_FIELD_NUMBER = 7
      final val VIDEO_URL_FIELD_NUMBER = 13
      final val STAR_RATING_FIELD_NUMBER = 8
      final val CLICK_LINK_URL_FIELD_NUMBER = 14
      final val CLICK_TRACKING_URL_FIELD_NUMBER = 11
      final val PRICE_FIELD_NUMBER = 10
      final val STORE_FIELD_NUMBER = 12
      final val DEPRECATED_IMPRESSION_TRACKING_URL_FIELD_NUMBER = 9
    }
    
    /** @param id
      *   The slot id from the BidRequest that the ad may appear in.
      * @param maxCpmMicros
      *   The maximum CPM you want to be charged if you win the auction for this
      *   ad slot, expressed in micros of your account currency. For example, to
      *   bid a CPM of 1.29 USD, set max_cpm_micros = 1290000. Winning bids are
      *   rounded up to billable units. For example, in USD, bids are rounded up
      *   to the next multiple of 10,000 micros (one cent).
      * @param minCpmMicros
      *   The minimum CPM you want to be charged if you win the auction for this
      *   ad slot. This may represent a second price if you choose max_cpm as the
      *   highest of several bids, or some form of reserve price if you wish to
      *   override the reserve price set by the publisher. The bid must be less
      *   than or equal to max_cpm_micros or it will be ignored. This field is
      *   optional and does not need to be set.
      * @param billingId
      *   Billing id to attribute this impression to. The value must be in the
      *   set of billing ids for this slot that were sent in the
      *   BidRequest.AdSlot.matching_ad_data.billing_id. This must always be set
      *   if the BidRequest has more than one
      *   BidRequest.AdSlot.matching_ad_data.billing_id.
      * @param dealId
      *   The deal id that you want this bid to participate in. Leave unset
      *   or set it to "1" if a deal is available but you want to
      *   ignore the deal and participate in the open auction.
      * @param exchangeDealId
      *   For exchange bidders (third party exchanges doing real-time bidding on
      *   DFP), the deal id from the exchange's namespace that is associated with
      *   this bid and reported to publishers.  Leave unset if there is no
      *   associated deal. This is arbitrary UTF8 text and must be at most 64
      *   bytes.
      */
    @SerialVersionUID(0L)
    final case class AdSlot(
        id: Int,
        maxCpmMicros: Long,
        minCpmMicros: scala.Option[Long] = None,
        billingId: scala.Option[Long] = None,
        dealId: scala.Option[Long] = None,
        exchangeDealId: scala.Option[String] = None,
        exchangeDealType: scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType] = None
        ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[AdSlot] with com.trueaccord.lenses.Updatable[AdSlot] {
        @transient
        private[this] var __serializedSizeCachedValue: Int = 0
        private[this] def __computeSerializedValue(): Int = {
          var __size = 0
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, id)
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, maxCpmMicros)
          if (minCpmMicros.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, minCpmMicros.get) }
          if (billingId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, billingId.get) }
          if (dealId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, dealId.get) }
          if (exchangeDealId.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, exchangeDealId.get) }
          if (exchangeDealType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(7, exchangeDealType.get.value) }
          __size
        }
        final override def serializedSize: Int = {
          var read = __serializedSizeCachedValue
          if (read == 0) {
            read = __computeSerializedValue()
            __serializedSizeCachedValue = read
          }
          read
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
          _output__.writeInt32(1, id)
          _output__.writeInt64(2, maxCpmMicros)
          minCpmMicros.foreach { __v =>
            _output__.writeInt64(3, __v)
          };
          billingId.foreach { __v =>
            _output__.writeInt64(4, __v)
          };
          dealId.foreach { __v =>
            _output__.writeInt64(5, __v)
          };
          exchangeDealId.foreach { __v =>
            _output__.writeString(6, __v)
          };
          exchangeDealType.foreach { __v =>
            _output__.writeEnum(7, __v.value)
          };
        }
        def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot = {
          var __id = this.id
          var __maxCpmMicros = this.maxCpmMicros
          var __minCpmMicros = this.minCpmMicros
          var __billingId = this.billingId
          var __dealId = this.dealId
          var __exchangeDealId = this.exchangeDealId
          var __exchangeDealType = this.exchangeDealType
          var __requiredFields0: Long = 0x3L
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 8 =>
                __id = _input__.readInt32()
                __requiredFields0 &= 0xfffffffffffffffeL
              case 16 =>
                __maxCpmMicros = _input__.readInt64()
                __requiredFields0 &= 0xfffffffffffffffdL
              case 24 =>
                __minCpmMicros = Some(_input__.readInt64())
              case 32 =>
                __billingId = Some(_input__.readInt64())
              case 40 =>
                __dealId = Some(_input__.readInt64())
              case 50 =>
                __exchangeDealId = Some(_input__.readString())
              case 56 =>
                __exchangeDealType = Some(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType.fromValue(_input__.readEnum()))
              case tag => _input__.skipField(tag)
            }
          }
          if (__requiredFields0 != 0L) { throw new _root_.com.google.protobuf.InvalidProtocolBufferException("Message missing required fields.") } 
          com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot(
              id = __id,
              maxCpmMicros = __maxCpmMicros,
              minCpmMicros = __minCpmMicros,
              billingId = __billingId,
              dealId = __dealId,
              exchangeDealId = __exchangeDealId,
              exchangeDealType = __exchangeDealType
          )
        }
        def withId(__v: Int): AdSlot = copy(id = __v)
        def withMaxCpmMicros(__v: Long): AdSlot = copy(maxCpmMicros = __v)
        def getMinCpmMicros: Long = minCpmMicros.getOrElse(0L)
        def clearMinCpmMicros: AdSlot = copy(minCpmMicros = None)
        def withMinCpmMicros(__v: Long): AdSlot = copy(minCpmMicros = Some(__v))
        def getBillingId: Long = billingId.getOrElse(0L)
        def clearBillingId: AdSlot = copy(billingId = None)
        def withBillingId(__v: Long): AdSlot = copy(billingId = Some(__v))
        def getDealId: Long = dealId.getOrElse(0L)
        def clearDealId: AdSlot = copy(dealId = None)
        def withDealId(__v: Long): AdSlot = copy(dealId = Some(__v))
        def getExchangeDealId: String = exchangeDealId.getOrElse("")
        def clearExchangeDealId: AdSlot = copy(exchangeDealId = None)
        def withExchangeDealId(__v: String): AdSlot = copy(exchangeDealId = Some(__v))
        def getExchangeDealType: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType = exchangeDealType.getOrElse(com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType.OPEN_AUCTION)
        def clearExchangeDealType: AdSlot = copy(exchangeDealType = None)
        def withExchangeDealType(__v: com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType): AdSlot = copy(exchangeDealType = Some(__v))
        def getFieldByNumber(__fieldNumber: Int): scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => id
            case 2 => maxCpmMicros
            case 3 => minCpmMicros.orNull
            case 4 => billingId.orNull
            case 5 => dealId.orNull
            case 6 => exchangeDealId.orNull
            case 7 => exchangeDealType.map(_.javaValueDescriptor).orNull
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PInt(id)
            case 2 => _root_.scalapb.descriptors.PLong(maxCpmMicros)
            case 3 => minCpmMicros.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 4 => billingId.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 5 => dealId.map(_root_.scalapb.descriptors.PLong).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 6 => exchangeDealId.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 7 => exchangeDealType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          }
        }
        override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
        def companion = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot
    }
    
    object AdSlot extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot] {
      implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot] = this
      def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot = {
        require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
        val __fields = javaDescriptor.getFields
        com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot(
          __fieldsMap(__fields.get(0)).asInstanceOf[Int],
          __fieldsMap(__fields.get(1)).asInstanceOf[Long],
          __fieldsMap.get(__fields.get(2)).asInstanceOf[scala.Option[Long]],
          __fieldsMap.get(__fields.get(3)).asInstanceOf[scala.Option[Long]],
          __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Long]],
          __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[String]],
          __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor]].map(__e => com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType.fromValue(__e.getNumber))
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
          com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot(
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).get.as[Int],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).get.as[Long],
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[scala.Option[Long]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[scala.Option[Long]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Long]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[String]]),
            __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType.fromValue(__e.number))
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.javaDescriptor.getNestedTypes.get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
      def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 7 => com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType
        }
      }
      lazy val defaultInstance = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot(
        id = 0,
        maxCpmMicros = 0L
      )
      sealed trait ExchangeDealType extends _root_.com.trueaccord.scalapb.GeneratedEnum {
        type EnumType = ExchangeDealType
        def isOpenAuction: Boolean = false
        def isPrivateAuction: Boolean = false
        def isPreferredDeal: Boolean = false
        def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[ExchangeDealType] = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType
      }
      
      object ExchangeDealType extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[ExchangeDealType] {
        implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[ExchangeDealType] = this
        @SerialVersionUID(0L)
        case object OPEN_AUCTION extends ExchangeDealType {
          val value = 0
          val index = 0
          val name = "OPEN_AUCTION"
          override def isOpenAuction: Boolean = true
        }
        
        @SerialVersionUID(0L)
        case object PRIVATE_AUCTION extends ExchangeDealType {
          val value = 1
          val index = 1
          val name = "PRIVATE_AUCTION"
          override def isPrivateAuction: Boolean = true
        }
        
        @SerialVersionUID(0L)
        case object PREFERRED_DEAL extends ExchangeDealType {
          val value = 2
          val index = 2
          val name = "PREFERRED_DEAL"
          override def isPreferredDeal: Boolean = true
        }
        
        @SerialVersionUID(0L)
        case class Unrecognized(value: Int) extends ExchangeDealType with _root_.com.trueaccord.scalapb.UnrecognizedEnum
        
        lazy val values = scala.collection.Seq(OPEN_AUCTION, PRIVATE_AUCTION, PREFERRED_DEAL)
        def fromValue(value: Int): ExchangeDealType = value match {
          case 0 => OPEN_AUCTION
          case 1 => PRIVATE_AUCTION
          case 2 => PREFERRED_DEAL
          case __other => Unrecognized(__other)
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.javaDescriptor.getEnumTypes.get(0)
        def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.scalaDescriptor.enums(0)
      }
      implicit class AdSlotLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot](_l) {
        def id: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
        def maxCpmMicros: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.maxCpmMicros)((c_, f_) => c_.copy(maxCpmMicros = f_))
        def minCpmMicros: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getMinCpmMicros)((c_, f_) => c_.copy(minCpmMicros = Some(f_)))
        def optionalMinCpmMicros: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.minCpmMicros)((c_, f_) => c_.copy(minCpmMicros = f_))
        def billingId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getBillingId)((c_, f_) => c_.copy(billingId = Some(f_)))
        def optionalBillingId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.billingId)((c_, f_) => c_.copy(billingId = f_))
        def dealId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getDealId)((c_, f_) => c_.copy(dealId = Some(f_)))
        def optionalDealId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.dealId)((c_, f_) => c_.copy(dealId = f_))
        def exchangeDealId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getExchangeDealId)((c_, f_) => c_.copy(exchangeDealId = Some(f_)))
        def optionalExchangeDealId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.exchangeDealId)((c_, f_) => c_.copy(exchangeDealId = f_))
        def exchangeDealType: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType] = field(_.getExchangeDealType)((c_, f_) => c_.copy(exchangeDealType = Some(f_)))
        def optionalExchangeDealType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot.ExchangeDealType]] = field(_.exchangeDealType)((c_, f_) => c_.copy(exchangeDealType = f_))
      }
      final val ID_FIELD_NUMBER = 1
      final val MAX_CPM_MICROS_FIELD_NUMBER = 2
      final val MIN_CPM_MICROS_FIELD_NUMBER = 3
      final val BILLING_ID_FIELD_NUMBER = 4
      final val DEAL_ID_FIELD_NUMBER = 5
      final val EXCHANGE_DEAL_ID_FIELD_NUMBER = 6
      final val EXCHANGE_DEAL_TYPE_FIELD_NUMBER = 7
    }
    
    implicit class AdLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad](_l) {
      def buyerCreativeId: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getBuyerCreativeId)((c_, f_) => c_.copy(buyerCreativeId = Some(f_)))
      def optionalBuyerCreativeId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.buyerCreativeId)((c_, f_) => c_.copy(buyerCreativeId = f_))
      def htmlSnippet: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getHtmlSnippet)((c_, f_) => c_.copy(htmlSnippet = Some(f_)))
      def optionalHtmlSnippet: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.htmlSnippet)((c_, f_) => c_.copy(htmlSnippet = f_))
      def videoUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getVideoUrl)((c_, f_) => c_.copy(videoUrl = Some(f_)))
      def optionalVideoUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.videoUrl)((c_, f_) => c_.copy(videoUrl = f_))
      def nativeAd: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd] = field(_.getNativeAd)((c_, f_) => c_.copy(nativeAd = Some(f_)))
      def optionalNativeAd: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.NativeAd]] = field(_.nativeAd)((c_, f_) => c_.copy(nativeAd = f_))
      def clickThroughUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.clickThroughUrl)((c_, f_) => c_.copy(clickThroughUrl = f_))
      def vendorType: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.vendorType)((c_, f_) => c_.copy(vendorType = f_))
      def attribute: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.attribute)((c_, f_) => c_.copy(attribute = f_))
      def category: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.category)((c_, f_) => c_.copy(category = f_))
      def restrictedCategory: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Int]] = field(_.restrictedCategory)((c_, f_) => c_.copy(restrictedCategory = f_))
      def advertiserName: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.advertiserName)((c_, f_) => c_.copy(advertiserName = f_))
      def bidderName: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getBidderName)((c_, f_) => c_.copy(bidderName = Some(f_)))
      def optionalBidderName: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.bidderName)((c_, f_) => c_.copy(bidderName = f_))
      def width: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getWidth)((c_, f_) => c_.copy(width = Some(f_)))
      def optionalWidth: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.width)((c_, f_) => c_.copy(width = f_))
      def height: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getHeight)((c_, f_) => c_.copy(height = Some(f_)))
      def optionalHeight: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.height)((c_, f_) => c_.copy(height = f_))
      def agencyId: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.getAgencyId)((c_, f_) => c_.copy(agencyId = Some(f_)))
      def optionalAgencyId: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Long]] = field(_.agencyId)((c_, f_) => c_.copy(agencyId = f_))
      def adslot: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad.AdSlot]] = field(_.adslot)((c_, f_) => c_.copy(adslot = f_))
      def impressionTrackingUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.impressionTrackingUrl)((c_, f_) => c_.copy(impressionTrackingUrl = f_))
      def adChoicesDestinationUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getAdChoicesDestinationUrl)((c_, f_) => c_.copy(adChoicesDestinationUrl = Some(f_)))
      def optionalAdChoicesDestinationUrl: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.adChoicesDestinationUrl)((c_, f_) => c_.copy(adChoicesDestinationUrl = f_))
    }
    final val BUYER_CREATIVE_ID_FIELD_NUMBER = 10
    final val HTML_SNIPPET_FIELD_NUMBER = 1
    final val VIDEO_URL_FIELD_NUMBER = 9
    final val NATIVE_AD_FIELD_NUMBER = 18
    final val CLICK_THROUGH_URL_FIELD_NUMBER = 4
    final val VENDOR_TYPE_FIELD_NUMBER = 5
    final val ATTRIBUTE_FIELD_NUMBER = 6
    final val CATEGORY_FIELD_NUMBER = 7
    final val RESTRICTED_CATEGORY_FIELD_NUMBER = 17
    final val ADVERTISER_NAME_FIELD_NUMBER = 11
    final val BIDDER_NAME_FIELD_NUMBER = 22
    final val WIDTH_FIELD_NUMBER = 14
    final val HEIGHT_FIELD_NUMBER = 15
    final val AGENCY_ID_FIELD_NUMBER = 16
    final val ADSLOT_FIELD_NUMBER = 3
    final val IMPRESSION_TRACKING_URL_FIELD_NUMBER = 19
    final val AD_CHOICES_DESTINATION_URL_FIELD_NUMBER = 21
  }
  
  implicit class BidResponseLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse](_l) {
    def ad: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[com.kirishikistudios.com.adx.google.realtime_bidding.BidResponse.Ad]] = field(_.ad)((c_, f_) => c_.copy(ad = f_))
    def debugString: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getDebugString)((c_, f_) => c_.copy(debugString = Some(f_)))
    def optionalDebugString: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.debugString)((c_, f_) => c_.copy(debugString = f_))
    def processingTimeMs: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getProcessingTimeMs)((c_, f_) => c_.copy(processingTimeMs = Some(f_)))
    def optionalProcessingTimeMs: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Int]] = field(_.processingTimeMs)((c_, f_) => c_.copy(processingTimeMs = f_))
  }
  final val AD_FIELD_NUMBER = 2
  final val DEBUG_STRING_FIELD_NUMBER = 5
  final val PROCESSING_TIME_MS_FIELD_NUMBER = 4
}
